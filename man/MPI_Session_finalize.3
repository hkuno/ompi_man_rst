.\" Man page generated from reStructuredText.
.
.TH "MPI_SESSION_FINALIZE" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Session_finalize\fP \- releases all MPI state associated with a session
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Session_finalize(MPI_Session *session)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_SESSION_FINALIZE(SESSION, IERROR)
    INTEGER SESSION, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Session_finalize(session, ierror)
    TYPE(MPI_Session), INTENT(IN) :: session
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
session : session to be finalized (handle)
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
IERROR : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Session_finalize\fP releases all MPI state associated with the supplied
session. Every instantiated session must be finalized using
\fI\%MPI_Session_finalize\fP\&. The handle session is set to MPI_SESSION_NULL by
the call.
.SH NOTES
.sp
Before an MPI process invokes \fI\%MPI_Session_finalize\fP, the process must
perform all MPI calls needed to complete its involvement in MPI
communications: it must locally complete all MPI operations that it
initiated and it must execute matching calls needed to complete MPI
communications initiated by other processes. The call to
\fI\%MPI_Session_finalize\fP does not free objects created by MPI calls; these
objects are freed using MPI_XXX_FREE calls. \fI\%MPI_Session_finalize\fP may be
synchronizing on any or all of the groups associated with communicators,
windows, or â€€les derived from the session and not disconnected, freed,
or closed, respectively, before the call to \fI\%MPI_Session_finalize\fP
procedure. \fI\%MPI_Session_finalize\fP behaves as if all such synchronizations
occur concurrently. As MPI_Comm_free may mark a communicator for freeing
later, \fI\%MPI_Session_finalize\fP may be synchronizing on the group associated
with a communicator that is only freed (with MPI_Comm_free) rather than
disconnected (with MPI_Comm_disconnect).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Session_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned. Note
that MPI does not guarantee that an MPI program can continue past an
error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Session_init
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
