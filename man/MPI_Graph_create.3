.\" Man page generated from reStructuredText.
.
.TH "MPI_GRAPH_CREATE" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Graph_create\fP \- Makes a new communicator to which topology
information has been attached.
.SH SYNTAX
.SS C Syntax
.sp
c #include <mpi.h>
.sp
int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],
const int edges[], int reorder, MPI_Comm *comm_graph)
.SS Fortran Syntax
.sp
fortran USE MPI ! or the older form: INCLUDE \(aqmpif.h\(aq
.sp
MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER, COMM_GRAPH,
IERROR) INTEGER COMM_OLD, NNODES, INDEX(*), EDGES(*) INTEGER COMM_GRAPH,
IERROR LOGICAL REORDER
.SS Fortran 2008 Syntax
.sp
fortran USE mpi_f08
.sp
MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph,
ierror) TYPE(MPI_Comm), INTENT(IN) :: comm_old INTEGER, INTENT(IN) ::
nnodes, index(nnodes), edges(*) LOGICAL, INTENT(IN) :: reorder
TYPE(MPI_Comm), INTENT(OUT) :: comm_graph INTEGER, OPTIONAL, INTENT(OUT)
:: ierror
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
comm_old : Input communicator without topology (handle).
.IP \(bu 2
nnodes : Number of nodes in graph (integer).
.IP \(bu 2
index : Array of integers describing node degrees (see below).
.IP \(bu 2
edges : Array of integers describing graph edges (see below).
.IP \(bu 2
reorder : Ranking may be reordered (true) or not (false) (logical).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
comm_graph : Communicator with graph topology added (handle).
.IP \(bu 2
IERROR : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Graph_create\fP returns a handle to a new communicator to which the
graph topology information is attached. If reorder = false then the rank
of each process in the new group is identical to its rank in the old
group. Otherwise, the function may reorder the processes. If the size,
nnodes, of the graph is smaller than the size of the group of comm_old,
then some processes are returned MPI_COMM_NULL, in analogy to
MPI_Cart_create and MPI_Comm_split\&. The call is erroneous if it
specifies a graph that is larger than the group size of the input
communicator.
.sp
The three parameters nnodes, index, and edges define the graph
structure. nnodes is the number of nodes of the graph. The nodes are
numbered from 0 to nnodes\-1. The ith entry of array index stores the
total number of neighbors of the first i graph nodes. The lists of
neighbors of nodes 0, 1, ..., nnodes\-1 are stored in consecutive
locations in array edges. The array edges is a flattened representation
of the edge lists. The total number of entries in index is nnodes and
the total number of entries in edges is equal to the number of graph
edges.
.sp
The definitions of the arguments nnodes, index, and edges are
illustrated with the following simple example.
.sp
Example: Assume there are four processes 0, 1, 2, 3 with the following
adjacency matrix:
.sp
\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
Process Neighbors
\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
0       1, 3
1       0
2       3
3       0, 2
\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.sp
Then, the input arguments are:
.INDENT 0.0
.IP \(bu 2
nodes = 4
.IP \(bu 2
index = 2, 3, 4, 6
.IP \(bu 2
edges = 1, 3, 0, 3, 0, 2
.UNINDENT
.sp
Thus, in C, index[0] is the degree of node zero, and index[i] \-
index[i\-1] is the degree of node i, i=1, . . . , nnodes\-1; the list of
neighbors of node zero is stored in edges[j], for 0 <= j <= index[0] \- 1
and the list of neighbors of node i, i > 0 , is stored in edges[j],
index[i\-1] <= j <= index[i] \- 1.
.sp
In Fortran, index(1) is the degree of node zero, and index(i+1) \-
index(i) is the degree of node i, i=1, . . . , nnodes\-1; the list of
neighbors of node zero is stored in edges(j), for 1 <= j <= index(1) and
the list of neighbors of node i, i > 0, is stored in edges(j), index(i)
+ 1 <= j <= index(i + 1).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Graph_get
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
