.\" Man page generated from reStructuredText.
.
.TH "MPI_GRAPH_CREATE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..

.sp
.ce
----

.ce 0
.sp
.sp
\fI\%MPI_Graph_create\fP \- Makes a new communicator to which topology
information has been attached.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[],
    const int edges[], int reorder, MPI_Comm *comm_graph)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_GRAPH_CREATE(COMM_OLD, NNODES, INDEX, EDGES, REORDER,
        COMM_GRAPH, IERROR)
    INTEGER COMM_OLD, NNODES, INDEX(*), EDGES(*)
    INTEGER COMM_GRAPH, IERROR
    LOGICAL   REORDER
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Graph_create(comm_old, nnodes, index, edges, reorder, comm_graph,
        ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm_old
    INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*)
    LOGICAL, INTENT(IN) :: reorder
    TYPE(MPI_Comm), INTENT(OUT) :: comm_graph
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_old\fP : Input communicator without topology (handle).
.IP \(bu 2
\fBnnodes\fP : Number of nodes in graph (integer).
.IP \(bu 2
\fBindex\fP : Array of integers describing node degrees (see below).
.IP \(bu 2
\fBedges\fP : Array of integers describing graph edges (see below).
.IP \(bu 2
\fBreorder\fP : Ranking may be reordered (true) or not (false)
(logical).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_graph\fP : Communicator with graph topology added (handle).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Graph_create\fP returns a handle to a new communicator to which the
graph topology information is attached. If \fBreorder\fP = false then the
rank of each process in the new group is identical to its rank in the
old group. Otherwise, the function may \fBreorder\fP the processes. If the
size, \fBnnodes\fP, of the graph is smaller than the size of the group of
\fBcomm_old\fP, then some processes are returned MPI_COMM_NULL, in
analogy to MPI_Cart_create and MPI_Comm_split\&. The call is
erroneous if it specifies a graph that is larger than the group size of
the input communicator.
.sp
The three parameters \fBnnodes\fP, \fBindex\fP, and \fBedges\fP define the
graph structure. \fBnnodes\fP is the number of nodes of the graph. The
nodes are numbered from 0 to \fBnnodes\fP\-1. The ith entry of array
\fBindex\fP stores the total number of neighbors of the first i graph
nodes. The lists of neighbors of nodes 0, 1, ..., \fBnnodes\fP\-1 are
stored in consecutive locations in array \fBedges\fP\&. The array \fBedges\fP
is a flattened representation of the edge lists. The total number of
entries in \fBindex\fP is \fBnnodes\fP and the total number of entries in
\fBedges\fP is equal to the number of graph \fBedges\fP\&.
.sp
The definitions of the arguments \fBnnodes\fP, \fBindex\fP, and \fBedges\fP
are illustrated with the following simple example.
.sp
Example: Assume there are four processes 0, 1, 2, 3 with the following
adjacency matrix:
.TS
center;
|l|l|.
_
T{
Process
T}	T{
Neighbors
T}
_
T{
0
T}	T{
1, 3
T}
_
T{
1
T}	T{
0
T}
_
T{
2
T}	T{
3
T}
_
T{
3
T}	T{
0, 2
T}
_
.TE
.sp
Then, the input arguments are:
.INDENT 0.0
.IP \(bu 2
\fBnodes\fP = 4
.IP \(bu 2
\fBindex\fP = 2, 3, 4, 6
.IP \(bu 2
\fBedges\fP = 1, 3, 0, 3, 0, 2
.UNINDENT
.sp
Thus, in C, \fBindex[0]\fP is the degree of \fBnode\fP zero, and
\fBindex[i]\fP \- \fBindex[i\-1]\fP is the degree of \fBnode\fP i, i=1, . . . ,
nnodes\-1; the list of neighbors of node zero is stored in \fBedges[j]\fP,
for 0 <= j <= \fBindex[0] \- 1\fP and the list of neighbors of \fBnode\fP i,
i > 0 , is stored in \fBedges[j]\fP, \fBindex[i\-1]\fP <= j <=
\fBindex[i] \- 1\fP\&.
.sp
In Fortran, \fBindex(1)\fP is the degree of \fBnode\fP zero, and
\fBindex(i+1)\fP \- \fBindex(i)\fP is the degree of \fBnode\fP i, i=1, . . . ,
nnodes\-1; the list of neighbors of \fBnode\fP zero is stored in
\fBedges(j)\fP, for 1 <= j <= \fBindex(1)\fP and the list of neighbors of
\fBnode\fP i, i > 0, is stored in \fBedges(j)\fP, \fBindex(i) + 1\fP <= j <=
\fBindex(i + 1)\fP\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Graph_get MPI_Graphdims_get
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
