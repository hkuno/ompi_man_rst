.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_STRUCT" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_struct\fP \- Creates a \fIstruct\fP data type \-\- use of this
routine is deprecated.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Type_struct(int count, int *array_of_blocklengths,
     MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types,
     MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INCLUDE \(aqmpif.h\(aq
MPI_TYPE_STRUCT(COUNT, ARRAY_OF_BLOCKLENGTHS,
             ARRAY_OF_DISPLACEMENTS, ARRAY_OF_TYPES,
             NEWTYPE, IERROR)
     INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*)
     INTEGER ARRAY_OF_DISPLACEMENTS(*)
     INTEGER ARRAY_OF_TYPES(*), NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of blocks (integer) also number of entries in arrays array_of_types, array_of_displacements, and array_of_blocklengths.
.IP \(bu 2
\fBarray_of_blocklengths\fP: Number of elements in each block (array).
.IP \(bu 2
\fBarray_of_displacements\fP: Byte displacement of each block (array).
.IP \(bu 2
\fBarray_of_types\fP: Type of elements in each block (array of handles to datatype objects).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New datatype (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Note that use of this routine is \fIdeprecated\fP as of MPI\-2. Use
MPI_Type_create_struct instead.
.sp
\fI\%MPI_Type_struct\fP is the most general type constructor. It further
generalizes MPI_Type_hindexed in that it allows each block to consist of
replications of different datatypes.
.sp
\fBExample:\fP Let type1 have type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 0), (char, 8)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
with extent 16. Let B = (2, 1, 3), D = (0, 16, 26), and T = (MPI_FLOAT,
type1, MPI_CHAR). Then a call to MPI_Type_struct(3, B, D, T, newtype)
returns a datatype with type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(float, 0), (float,4), (double, 16), (char, 24),
(char, 26), (char, 27), (char, 28)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That is, two copies of MPI_FLOAT starting at 0, followed by one copy of
type1 starting at 16, followed by three copies of MPI_CHAR, starting at
26. (We assume that a float occupies 4 bytes.)
.sp
For more information, see section 3.12.1 of the MPI\-1.1 Standard.
.SH NOTES
.sp
If an upperbound is set explicitly by using the MPI datatype MPI_UB, the
corresponding index must be positive.
.sp
The MPI\-1 Standard originally made vague statements about padding and
alignment; this was intended to allow the simple definition of
structures that could be sent with a count greater than one. For
example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct {int a; char b;} foo;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
may have
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
sizeof(foo) = sizeof(int) + sizeof(char);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
defining the extent of a datatype as including an epsilon, which would
have allowed an implementation to make the extent an MPI datatype for
this structure equal to 2*sizeof(int). However, since different systems
might define different paddings, a clarification to the standard made
epsilon zero. Thus, if you define a structure datatype and wish to send
or receive multiple items, you should explicitly include an MPI_UB entry
as the last member of the structure. For example, the following code can
be used for the structure foo:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
blen[0] = 1; indices[0] = 0; oldtypes[0] = MPI_INT;
blen[1] = 1; indices[1] = &foo.b \- &foo; oldtypes[1] = MPI_CHAR;
blen[2] = 1; indices[2] = sizeof(foo); oldtypes[2] = MPI_UB;
MPI_Type_struct( 3, blen, indices, oldtypes, &newtype );
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Type_create_struct MPI_Type_create_hindexed
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
