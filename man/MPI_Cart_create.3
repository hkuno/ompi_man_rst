.\" Man page generated from reStructuredText.
.
.TH "MPI_CART_CREATE" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Cart_create\fP \- Makes a new communicator to which Cartesian
topology information has been attached.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int dims[],

    const int periods[], int reorder, MPI_Comm *comm_cart)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_CART_CREATE(COMM_OLD, NDIMS, DIMS, PERIODS, REORDER,
        COMM_CART, IERROR)
    INTEGER COMM_OLD, NDIMS, DIMS(*), COMM_CART, IERROR
    LOGICAL PERIODS(*), REORDER
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Cart_create(comm_old, ndims, dims, periods, reorder, comm_cart, ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm_old
    INTEGER, INTENT(IN) :: ndims, dims(ndims)
    LOGICAL, INTENT(IN) :: periods(ndims), reorder
    TYPE(MPI_Comm), INTENT(OUT) :: comm_cart
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_old\fP : Input communicator (handle).
.IP \(bu 2
\fBndims\fP : Number of dimensions of Cartesian grid (integer).
.IP \(bu 2
\fBdims\fP : Integer array of size ndims specifying the number of
processes in each dimension.
.IP \(bu 2
\fBperiods\fP : Logical array of size ndims specifying whether the grid
is periodic (true) or not (false) in each dimension.
.IP \(bu 2
\fBreorder\fP : Ranking may be reordered (true) or not (false)
(logical).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_cart\fP : Communicator with new Cartesian topology (handle).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Cart_create\fP returns a handle to a new communicator to which the
Cartesian topology information is attached. If \fBreorder\fP = false then
the rank of each process in the new group is identical to its rank in
the old group. Otherwise, the function may \fBreorder\fP the processes
(possibly so as to choose a good embedding of the virtual topology onto
the physical machine). If the total size of the Cartesian grid is
smaller than the size of the group of comm, then some processes are
returned MPI_COMM_NULL, in analogy to MPI_Comm_split\&. The call
is erroneous if it specifies a grid that is larger than the group size.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
