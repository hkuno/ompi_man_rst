.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_ATTACH" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_attach\fP, MPI_Win_detach \- One\-sided MPI call that attaches /
detaches a memory region to / from a window object for RMA operations.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size)

MPI_Win_detach(MPI_Win win, void *base)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_ATTACH(WIN, BASE, SIZE, IERROR)
     <type> BASE(*)
     INTEGER(KIND=MPI_ADDRESS_KIND) SIZE
     INTEGER WIN, IERROR

MPI_WIN_DETACH(WIN, BASE, IERROR)
     <type> BASE(*)
     INTEGER WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_attach(win, base, size, ierror)
     TYPE(MPI_Win), INTENT(IN) :: win
     TYPE(*), DIMENSION(..), INTENT(IN) :: base
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Win_detach(win, base, ierror)
     TYPE(MPI_Win), INTENT(IN) :: win
     TYPE(*), DIMENSION(..), INTENT(IN) :: base
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBwin\fP: A window that was created with \fIMPI_Win_create_dynamic\fP
.IP \(bu 2
\fBbase\fP: Initial address of window (choice).
.IP \(bu 2
\fBsize\fP: Size of window in bytes (nonnegative integer).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBwin\fP: Window object returned by the call (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_attach\fP is a one\-sided MPI communication call used to attach a
memory region of \fIsize\fP bytes starting at address \fIbase\fP to a window for
RMA access. The window \fIwin\fP must have been created using
MPI_Win_create_dynamic\&. Multiple non\-overlapping memory regions may be
attached to the same dynamic window. Attaching overlapping memory
regions to the same dynamic window is erroneous.
.sp
If the \fIbase\fP value used by \fI\%MPI_Win_attach\fP was allocated by
MPI_Alloc_mem, the size of the window can be no larger than the value
set by the MPI_ALLOC_MEM function.
.sp
MPI_Win_detach can be used to detach a previously attached memory region
from \fIwin\fP\&. The memory address \fIbase\fP and \fIwin\fP must match arguments
passed to a previous call to \fI\%MPI_Win_attach\fP\&.
.SH NOTES
.sp
Use memory allocated by MPI_Alloc_mem to guarantee properly aligned
window boundaries (such as word, double\-word, cache line, page frame,
and so on).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
