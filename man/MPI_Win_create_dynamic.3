.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_CREATE_DYNAMIC" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_create_dynamic\fP \- One\-sided MPI call that returns a window
object for RMA operations.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_CREATE_DYNAMIC(INFO, COMM, WIN, IERROR)
     INTEGER INFO, COMM, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_create_dynamic(info, comm, win, ierror)
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Win), INTENT(OUT) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBinfo\fP: Info argument (handle).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBwin\fP: Window object returned by the call (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_create_dynamic\fP is a one\-sided MPI communication collective call
executed by all processes in the group of \fIcomm\fP\&. It returns a window
object without memory attached that can be used by these processes to
perform RMA operations.
.sp
A window created with \fI\%MPI_Win_create_dynamic\fP requires the
\fItarget_disp\fP argument for all RMA communication functions to be the
actual address at the target.
.sp
The following info keys are supported:
.INDENT 0.0
.TP
.B no_locks
If set to \fItrue\fP, then the implementation may assume that the local
window is never locked (by a call to MPI_Win_lock or
MPI_Win_lock_all). Setting this value if only active synchronization
may allow the implementation to enable certain optimizations.
.TP
.B accumulate_ordering
By default, accumulate operations from one initiator to one target on
the same window memory location are strictly ordered. If the info key
accumulate_ordering is set to \fInone\fP, no ordering of accumulate
operations guaranteed. They key can also be a comma\-separated list of
required orderings consisting of \fIrar\fP, \fIwar\fP, \fIraw\fP, and \fIwaw\fP for
read\-after\-read, write\-after\-read, read\-after\-write, and
write\-after\-write, respectively. Looser ordering constraints are
likely to result in improved performance.
.TP
.B accumulate_ops
If set to \fIsame_op\fP, the implementation will assume that all
concurrent accumulate calls to the same target address will use the
same operation. If set to \fIsame_op_no_op\fP, then the implementation
will assume that all concurrent accumulate calls to the same target
address will use the same operation or MPI_NO_OP. The default is
\fIsame_op_no_op\fP\&.
.UNINDENT
.SH NOTES
.sp
Since dynamically attaching memory to a window is a local operation, one
has to communicate the actual address at the target using
MPI_Get_address and some communication.
.sp
Dynamic memory does not have any \fIdisp_unit\fP associated and requires
correct offset calculations with proper type handling.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Win_attach  MPI_Win_detach MPI_Get_address
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
