.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_ALLOCATE" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_allocate\fP \- One\-sided MPI call that allocates memory and
returns a window object for RMA operations.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Win_allocate (MPI_Aint size, int disp_unit, MPI_Info info,
                      MPI_Comm comm, void *baseptr, MPI_Win *win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_ALLOCATE(SIZE, DISP_UNIT, INFO, COMM, BASEPTR, WIN, IERROR)
     INTEGER(KIND=MPI_ADDRESS_KIND) SIZE, BASEPTR
     INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_allocate(size, disp_unit, info, comm, baseptr, win, ierror)
     USE, INTRINSIC :: ISO_C_BINDING, ONLY : C_PTR
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
     INTEGER, INTENT(IN) :: disp_unit
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(C_PTR), INTENT(OUT) :: baseptr
     TYPE(MPI_Win), INTENT(OUT) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsize\fP: Size of window in bytes (nonnegative integer).
.IP \(bu 2
\fBdisp_unit\fP: Local unit size for displacements, in bytes (positive integer).
.IP \(bu 2
\fBinfo\fP: Info argument (handle).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBbaseptr\fP: Initial address of window.
.IP \(bu 2
\fBwin\fP: Window object returned by the call (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_allocate\fP is a collective call executed by all processes in
the group of \fIcomm\fP\&. On each process, it allocates memory of at least
\fIsize\fP bytes, returns a pointer to it, and returns a window object that
can be used by all processes in \fIcomm\fP to perform RMA operations. The
returned memory consists of \fIsize\fP bytes local to each process, starting
at address \fIbaseptr\fP and is associated with the window as if the user
called MPI_Win_create on existing memory. The \fIsize\fP argument may be
different at each process and \fIsize\fP = 0 is valid; however, a library
might allocate and expose more memory in order to create a fast,
globally symmetric allocation. The discussion of and rationales for
MPI_Alloc_mem and MPI_Free_mem in MPI\-3.1 � 8.2 also apply to
\fI\%MPI_Win_allocate\fP; in particular, see the rationale in MPI\-3.1 � 8.2
for an explanation of the type used for \fIbaseptr\fP\&.
.sp
The displacement unit argument is provided to facilitate address
arithmetic in RMA operations: the target displacement argument of an RMA
operation is scaled by the factor \fIdisp_unit\fP specified by the target
process, at window creation.
.sp
For supported info keys see MPI_Win_create\fI\&.\fP
.SH NOTES
.sp
Common choices for \fIdisp_unit are 1 (no scaling), and (in C\fP syntax)
\fIsizeof(type), for a window that consists of an array of\fP elements of
type \fItype. The later choice will allow one to use\fP array indices in RMA
calls, and have those scaled correctly to byte displacements, even in a
heterogeneous environment.
.sp
Calling MPI_Win_free\fIwill deallocate the memory allocated
by\fP\fI\%MPI_Win_allocate\fP\fI\&. It is thus erroneous to manually free
baseptr.\fP
.SH C NOTES
.sp
While \fIbaseptr is a void * type, this is to allow easy use of any
pointer object for this parameter. This argument is really a void **
type.\fP
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Alloc_mem MPI_Free_mem MPI_Win_create MPI_Win_allocate_shared
MPI_Win_free
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
