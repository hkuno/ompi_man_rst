.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_SET_SIZE" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_set_size\fP \- Resizes a file (collective).
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_File_set_size(MPI_File fh, MPI_Offset size)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_SET_SIZE(FH, SIZE, IERROR)
     INTEGER FH, IERROR
     INTEGER(KIND=MPI_OFFSET_KIND)   SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_set_size(fh, size, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: File handle (handle).
.IP \(bu 2
\fBsize\fP: Size to truncate or expand file (integer).
.UNINDENT
.sp
OUTPUT PARAMETER
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_set_size\fP resizes the file associated with the file handle \fIfh,\fP
truncating UNIX files as necessary. \fI\%MPI_File_set_size\fP is collective; all
processes in the group must pass identical values for size.
.sp
When using \fI\%MPI_File_set_size\fP on a UNIX file, if \fIsize\fP is larger than
the current file size, the file size becomes \fIsize\fP\&. If \fIsize\fP is
smaller than the current file size, the file is truncated at the
position defined by \fIsize\fP (from the beginning of the file and measured
in bytes). Regions of the file which have been previously written are
unaffected.
.sp
\fI\%MPI_File_set_size\fP does not affect the individual file pointers or the
shared file pointer.
.sp
Note that the actual amount of storage space cannot be allocated by
\fI\%MPI_File_set_size\fP\&. Use MPI_File_preallocate to accomplish this.
.sp
It is erroneous to call this function if MPI_MODE_SEQUENTIAL mode was
specified when the file was opened.
.sp
FORTRAN 77 NOTES
\-\-\-\-\-\-\- \-\- \-\-\-\-\-
.sp
The MPI standard prescribes portable Fortran syntax for the \fISIZE\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_OFFSET_KIND SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
