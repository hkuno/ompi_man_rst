.\" Man page generated from reStructuredText.
.
.TH "MPI_DIMS_CREATE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Dims_create\fP \- Creates a division of processors in a Cartesian
grid.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Dims_create(int nnodes, int ndims, int dims[])
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_DIMS_CREATE(NNODES, NDIMS, DIMS, IERROR)
     INTEGER NNODES, NDIMS, DIMS(*), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Dims_create(nnodes, ndims, dims, ierror)
     INTEGER, INTENT(IN) :: nnodes, ndims
     INTEGER, INTENT(INOUT) :: dims(ndims)
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnnodes\fP: Number of nodes in a grid (integer).
.IP \(bu 2
\fBndims\fP: Number of Cartesian dimensions (integer).
.UNINDENT
.SH IN/OUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBdims\fP: Integer array of size ndims specifying the number of nodes in each dimension.
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
For Cartesian topologies, the function \fI\%MPI_Dims_create\fP helps the user
select a balanced distribution of processes per coordinate direction,
depending on the number of processes in the group to be balanced and
optional constraints that can be specified by the user. One use is to
partition all the processes (the size of MPI_COMM_WORLD\(aqs group) into an
n\-dimensional topology.
.sp
The entries in the array \fIdims\fP are set to describe a Cartesian grid
with \fIndims\fP dimensions and a total of \fInnodes\fP nodes. The dimensions
are set to be as close to each other as possible, using an appropriate
divisibility algorithm. The caller may further constrain the operation
of this routine by specifying elements of array dims. If dims[i] is set
to a positive number, the routine will not modify the number of nodes in
dimension i; only those entries where dims[i] = 0 are modified by the
call.
.sp
Negative input values of dims[i] are erroneous. An error will occur if
nnodes is not a multiple of ((pi) over (i, dims[i] != 0)) dims[i].
.sp
For dims[i] set by the call, dims[i] will be ordered in nonincreasing
order. Array dims is suitable for use as input to routine
MPI_Cart_create\&. \fI\%MPI_Dims_create\fP is local.
.sp
\fBExample:\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dims
before                                       dims
call         function call           on return
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
(0,0)        MPI_Dims_create(6, 2, dims)     (3,2)
(0,0)        MPI_Dims_create(7, 2, dims)     (7,1)
(0,3,0)      MPI_Dims_create(6, 3, dims)     (2,3,1)
(0,3,0)      MPI_Dims_create(7, 3, dims)     erroneous call
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
