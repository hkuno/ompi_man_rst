.\" Man page generated from reStructuredText.
.
.TH "MPI_BCAST_INIT" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Bcast, MPI_Ibcast \- Broadcasts a message from the process
with rank \fIroot\fP to all other processes of the group.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype,
    int root, MPI_Comm comm)

int MPI_Ibcast(void *buffer, int count, MPI_Datatype datatype,
    int root, MPI_Comm comm, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_BCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, IERROR)
    <type>  BUFFER(*)
    INTEGER COUNT, DATATYPE, ROOT, COMM, IERROR

MPI_IBCAST(BUFFER, COUNT, DATATYPE, ROOT, COMM, REQUEST, IERROR)
    <type>  BUFFER(*)
    INTEGER COUNT, DATATYPE, ROOT, COMM, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Bcast(buffer, count, datatype, root, comm, ierror)
    TYPE(*), DIMENSION(..) :: buffer
    INTEGER, INTENT(IN) :: count, root
    TYPE(MPI_Datatype), INTENT(IN) :: datatype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Ibcast(buffer, count, datatype, root, comm, request, ierror)
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buffer
    INTEGER, INTENT(IN) :: count, root
    TYPE(MPI_Datatype), INTENT(IN) :: datatype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT/OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBbuffer\fP: Starting address of buffer (choice).
.IP \(bu 2
\fBcount\fP: Number of entries in buffer (integer).
.IP \(bu 2
\fBdatatype\fP: Data type of buffer (handle).
.IP \(bu 2
\fBroot\fP: Rank of broadcast root (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Bcast broadcasts a message from the process with rank root to
all processes of the group, itself included. It is called by all members
of group using the same arguments for \fBcomm\fP, \fBroot\fP\&. On return, the
contents of root\(aqs communication buffer has been copied to all
processes.
.sp
General, derived datatypes are allowed for datatype. The type signature
of count, datatype on any process must be equal to the type signature o
f count, datatype at the root. This implies that the amount of data sent
must be equal to the amount received, pairwise between each process and
the root. MPI_Bcast and all other data\-movement collective routines
make this restriction. Distinct type maps between sender and receiver
are still allowed.
.sp
\fBExample:\fP Broadcast 100 ints from process 0 to every process in the
group.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int array[100];
int root=0;
//...
MPI_Bcast( array, 100, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As in many of our sample code fragments, we assume that some of the
variables (such as comm in the example above) have been assigned
appropriate values.
.SH WHEN COMMUNICATOR IS AN INTER-COMMUNICATOR
.sp
When the communicator is an inter\-communicator, the root process in the
first group broadcasts data to all the processes in the second group.
The first group defines the root process. That process uses MPI_ROOT
as the value of its \fBroot\fP argument. The remaining processes use
MPI_PROC_NULL as the value of their \fBroot\fP argument. All processes
in the second group use the rank of that root process in the first group
as the value of their \fBroot\fP argument. The receive buffer arguments of
the processes in the second group must be consistent with the send
buffer argument of the root process in the first group.
.SH NOTES
.sp
This function does not support the in\-place option.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
