.\" Man page generated from reStructuredText.
.
.TH "MPI_INEIGHBOR_ALLGATHER" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Neighbor_allgather, \fI\%MPI_Ineighbor_allgather\fP,
MPI_Neighbor_allgather \- Gathers and distributes data from and to all
neighbors
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Neighbor_allgather(const void *sendbuf, int  sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
      MPI_Datatype recvtype, MPI_Comm comm)

int MPI_Ineighbor_allgather(const void *sendbuf, int  sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
      MPI_Datatype recvtype, MPI_Comm comm, MPI_Request req)

int MPI_Neighbor_allgather_init(const void *sendbuf, int  sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
      MPI_Datatype recvtype, MPI_Comm comm, MPI_Infoinfo, MPI_Request req)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_NEIGHBOR_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, COMM, IERROR)
     <type>  SENDBUF (*), RECVBUF (*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM,
     INTEGER IERROR

MPI_INEIGHBOR_ALLGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, COMM, REQUEST, IERROR)
     <type>  SENDBUF (*), RECVBUF (*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM,
     INTEGER REQUEST, IERROR

MPI_NEIGHBOR_ALLGATHER_INIT(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, COMM, INFO, IREQUEST, IERROR)
     <type>  SENDBUF (*), RECVBUF (*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, COMM,
     INTEGER INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Neighbor_allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
     TYPE(*), DIMENSION(..) :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Ineighbor_allgather(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, request, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Neighbor_allgather_init(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, info, request, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP: Starting address of send buffer (choice).
.IP \(bu 2
\fBsendcount\fP: Number of elements in send buffer (integer).
.IP \(bu 2
\fBsendtype\fP: Datatype of send buffer elements (handle).
.IP \(bu 2
\fBrecvbuf\fP: Starting address of recv buffer (choice).
.IP \(bu 2
\fBrecvcount\fP: Number of elements received from any process (integer).
.IP \(bu 2
\fBrecvtype\fP: Datatype of receive buffer elements (handle).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP: Address of receive buffer (choice).
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Neighbor_allgather is similar to MPI_Allgather, except that only the
neighboring processes receive the result, instead of all processes. The
neighbors and buffer layout is determined by the topology of \fIcomm\fP\&.
.sp
The type signature associated with sendcount, sendtype at a process must
be equal to the type signature associated with recvcount, recvtype at
any other process.
.sp
NEIGHBOR ORDERING
\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-
.sp
For a distributed graph topology, created with MPI_Dist_graph_create,
the sequence of neighbors in the send and receive buffers at each
process is defined as the sequence returned by MPI_Dist_graph_neighbors
for destinations and sources, respectively. For a general graph
topology, created with MPI_Graph_create, the order of neighbors in the
send and receive buffers is defined as the sequence of neighbors as
returned by MPI_Graph_neighbors\&. Note that general graph topologies
should generally be replaced by the distributed graph topologies.
.sp
For a Cartesian topology, created with MPI_Cart_create, the sequence of
neighbors in the send and receive buffers at each process is defined by
order of the dimensions, first the neighbor in the negative direction
and then in the positive direction with displacement 1. The numbers of
sources and destinations in the communication routines are 2*ndims with
ndims defined in MPI_Cart_create\&. If a neighbor does not exist, i.e., at
the border of a Cartesian topology in the case of a non\-periodic virtual
grid dimension (i.e., periods[...]==false), then this neighbor is
defined to be MPI_PROC_NULL.
.sp
If a neighbor in any of the functions is MPI_PROC_NULL, then the
neighborhood collective communication behaves like a point\-to\-point
communication with MPI_PROC_NULL in this direction. That is, the buffer
is still part of the sequence of neighbors but it is neither
communicated nor updated.
.SH NOTES
.sp
The MPI_IN_PLACE option for \fIsendbuf\fP is not meaningful for this
operation.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Neighbor_allgatherv  MPI_Cart_create  MPI_Garph_create  MPI_Dist_graph_create | MPI_Gather
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
