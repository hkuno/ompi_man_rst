.\" Man page generated from reStructuredText.
.
.TH "MPI_MPROBE" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Mprobe\fP \- Blocking matched probe for a message.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Mprobe(int source, int tag, MPI_Comm comm,
     MPI_Message *message, MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_MPROBE(SOURCE, TAG, COMM, MESSAGE, STATUS, IERROR)
     INTEGER SOURCE, TAG, COMM, MESSAGE
     INTEGER STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Mprobe(source, tag, comm, message, status, ierror)
     INTEGER, INTENT(IN) :: source, tag
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Message), INTENT(OUT) :: message
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBsource\fP: Source rank or MPI_ANY_SOURCE (integer).
.IP \(bu 2
\fBtag\fP: Tag value or MPI_ANY_TAG (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBmessage\fP: Message (handle).
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Like MPI_Probe and MPI_Iprobe, the \fI\%MPI_Mprobe\fP and MPI_Improbe operations
allow incoming messages to be queried without actually receiving them,
except that \fI\%MPI_Mprobe\fP and MPI_Improbe provide a mechanism to receive
the specific message that was matched regardless of other intervening
probe or receive operations. This gives the application an opportunity
to decide how to receive the message, based on the information returned
by the probe. In particular, the application may allocate memory for the
receive buffer according to the length of the probed message.
.sp
A matching probe with MPI_PROC_NULL as \fIsource\fP returns \fImessage\fP =
MPI_MESSAGE_NO_PROC, and the \fIstatus\fP object returns source =
MPI_PROC_NULL, tag = MPI_ANY_TAG, and count = 0.
.sp
When \fI\%MPI_Mprobe\fP returns (from a non\-MPI_PROC_NULL \fIsource\fP), the matched
message can then be received by passing the \fImessage\fP handle to the
MPI_Mrecv or MPI_Imrecv functions.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Improbe    MPI_Probe    MPI_Iprobe    MPI_Mrecv    MPI_Imrecv    MPI_Cancel
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
