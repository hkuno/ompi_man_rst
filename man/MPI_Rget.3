.\" Man page generated from reStructuredText.
.
.TH "MPI_RGET" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Get, \fI\%MPI_Rget\fP \- Copies data from the target memory to the origin.
.SH SYNTAX
.SS C Syntax
.sp
c #include <mpi.h>
.sp
MPI_Get(void *origin_addr, int origin_count, MPI_Datatype
origin_datatype, int target_rank, MPI_Aint target_disp, int
target_count, MPI_Datatype target_datatype, MPI_Win win)
.sp
MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype
origin_datatype, int target_rank, MPI_Aint target_disp, int
target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request
*request)
.SS Fortran Syntax (See Fortran 77 Notes)
.sp
fortran USE MPI ! or the older form: INCLUDE \(aqmpif.h\(aq
.sp
MPI_GET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,
TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR) ORIGIN_ADDR(*)
INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP INTEGER ORIGIN_COUNT,
ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, WIN, IERROR
.sp
MPI_RGET(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK,
TARGET_DISP, TARGET_COUNT, TARGET_DATATYPE, WIN, REQUEST, IERROR)
ORIGIN_ADDR(*) INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP INTEGER
ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_RANK, TARGET_COUNT,
TARGET_DATATYPE, WIN, REQUEST, IERROR
.SS Fortran 2008 Syntax
.sp
fortran USE mpi_f08
.sp
MPI_Get(origin_addr, origin_count, origin_datatype, target_rank,
target_disp, target_count, target_datatype, win, ierror) TYPE(*),
DIMENSION(..), ASYNCHRONOUS :: origin_addr INTEGER, INTENT(IN) ::
origin_count, target_rank, target_count TYPE(MPI_Datatype), INTENT(IN)
:: origin_datatype, target_datatype INTEGER(KIND=MPI_ADDRESS_KIND),
INTENT(IN) :: target_disp TYPE(MPI_Win), INTENT(IN) :: win INTEGER,
OPTIONAL, INTENT(OUT) :: ierror
.sp
MPI_Rget(origin_addr, origin_count, origin_datatype, target_rank,
target_disp, target_count, target_datatype, win, request, ierror)
TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr INTEGER, INTENT(IN)
:: origin_count, target_rank, target_count TYPE(MPI_Datatype),
INTENT(IN) :: origin_datatype, target_datatype
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp TYPE(MPI_Win),
INTENT(IN) :: win TYPE(MPI_Request), INTENT(OUT) :: request INTEGER,
OPTIONAL, INTENT(OUT) :: ierror
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
origin_addr : Initial address of origin buffer (choice).
.IP \(bu 2
origin_count : Number of entries in origin buffer (nonnegative
integer).
.IP \(bu 2
origin_datatype : Data type of each entry in origin buffer (handle).
.IP \(bu 2
target_rank : Rank of target (nonnegative integer).
.IP \(bu 2
target_disp : Displacement from window start to the beginning of the
target buffer (nonnegative integer).
.IP \(bu 2
target_count : Number of entries in target buffer (nonnegative
integer).
.IP \(bu 2
target datatype : datatype of each entry in target buffer (handle)
.IP \(bu 2
win : window object used for communication (handle)
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
request : \fI\%MPI_Rget\fP: RMA request
.IP \(bu 2
IERROR : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Get copies data from the target memory to the origin, similar to
MPI_Put, except that the direction of data transfer is reversed. The
origin_datatype may not specify overlapping entries in the origin
buffer. The target buffer must be contained within the target window,
and the copied data must fit, without truncation, in the origin buffer.
Only processes within the same node can access the target window.
.sp
\fI\%MPI_Rget\fP is similar to MPI_Get, except that it allocates a communication
request object and associates it with the request handle (the argument
request) that can be used to wait or test for completion. The completion
of an \fI\%MPI_Rget\fP operation indicates that the data is available in the
origin buffer. If origin_addr points to memory attached to a window,
then the data becomes available in the private copy of this window.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the TARGET_DISP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.sp
fortran INTEGERMPI_ADDRESS_KIND TARGET_DISP
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Put
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
