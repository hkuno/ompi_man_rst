.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CREATE_F90_INTEGER" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Type_create_f90_integer \- Returns a bounded MPI integer datatype
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_create_f90_integer(int r, MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CREATE_F90_INTEGER (R, NEWTYPE, IERROR)
     INTEGER R, NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_create_f90_integer(r, newtype, ierror)
     INTEGER, INTENT(IN) :: r
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETER
\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBr\fP: Precision, in decimal digits (integer).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New data type (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function provides a way to declare KIND\-parameterized INTEGER MPI
datatypes. The argument is interpreted in a similar fashion to the F90
function SELECTED_INT_KIND: \fIr\fP must be a scalar integer, and represents
the desired level of numerical precision, in decimal digits.
.SH NOTES
.sp
It is erroneous to supply a value for \fIr\fP not supported by the compiler.
.sp
The Fortran function SELECTED_INT_KIND maps a large number of \fIr\fP values
to a much smaller number of KIND parameters supported by the compiler.
KIND parameters are not specified by the language and are not portable.
From the point of view of the language, variables of the same base type
and KIND parameter are equivalent, even if their KIND parameters were
generated by different \fIr\fP arguments to SELECTED_INT_KIND. However, to
help facilitate interoperability in a heterogeneous environment,
equivalency is more strictly defined for datatypes returned by
\fI\%MPI_Type_create_f90_integer\fP\&. Two MPI datatypes, each generated by this
function, will match if and only if they have identical values for \fIr\fP\&.
.sp
The interaction between the datatypes returned by this function and the
external32 data representation \- used by MPI_Pack_external,
MPI_Unpack_external and many MPI_File functions \- is subtle. The
external32 representation of returned datatypes is as follows.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
if (r > 38):
        external32 size = n/a (undefined)
else if (r > 18):
        external32 size = 16
else if (r > 9):
        external32 size = 8
else if (r > 4):
        external32 size = 4
else if (r > 2):
        external32 size = 2
else:
        external32 size = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the external32 representation of a datatype is undefined, so are the
results of using that datatype in operations that require the external32
format. Care should be taken not to use incompatible datatypes
indirectly, e.g., as part of another datatype or through a duplicated
datatype, in these functions.
.sp
If a variable is declared specifying a nondefault KIND value that was
not obtained with SELECTED_INT_KIND (i.e., \fIr\fP is unknown), the only way
to obtain a matching MPI datatype is to use the functions MPI_Sizeof and
MPI_Type_match_size\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
See the MPI man page for a full list of MPI error codes.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Pack_external    MPI_Sizeof    MPI_Type_match_size    MPI_Unpack_external    SELECTED_INT_KIND
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
