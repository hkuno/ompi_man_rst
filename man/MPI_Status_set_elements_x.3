.\" Man page generated from reStructuredText.
.
.TH "MPI_STATUS_SET_ELEMENTS_X" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Status_set_elements, \fI\%MPI_Status_set_elements_x\fP \- Modifies
opaque part of \fIstatus\fP to allow MPI_Get_elements to return \fIcount\fP\&.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count)
int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_STATUS_SET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)
     INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERROR
MPI_STATUS_SET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)
     INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE
        INTEGER(KIND=MPI_COUNT_KIND) COUNT
        INTEGER IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Status_set_elements(status, datatype, count, ierror)
     TYPE(MPI_Status), INTENT(INOUT) :: status
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(IN) :: count
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
MPI_Status_set_elements_x(status, datatype, count, ierror)
     TYPE(MPI_Status), INTENT(INOUT) :: status
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER(KIND = MPI_COUNT_KIND), INTENT(IN) :: count
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT/OUTPUT PARAMETER
\-\-\-\-\-/\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBstatus\fP: Status to associate with \fIcount (status).\fP
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Data type associated with \fIcount (handle).\fP
.IP \(bu 2
\fBcount\fP: Number of elements to associate with \fIstatus (integer).\fP
.UNINDENT
.sp
OUTPUT PARAMETER
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Status_set_elements modifies the opaque part of \fIstatus so that a
call to :ref:\(gaMPI_Get_elements\(ga or :ref:\(gaMPI_Get_elements_x\(ga will return count.
:ref:\(gaMPI_Get_count\(ga will return a compatible value.\fP
.sp
A subsequent call to MPI_Get_count(status, datatype, count), to
MPI_Get_elements(status, datatype, count), or to
MPI_Get_elements_x(status, datatype, count) must use a data\-type
argument that has the same type signature as the data\-type argument that
was used in the call to MPI_Status_set_elements\&.*
.SH NOTES
.sp
Users are advised not to reuse the status fields for values other than
those for which they were intended. Doing so may lead to unexpected
results when using the status object. For example, calling
MPI_Get_elements may cause an error if the value is out of range, or it
may be impossible to detect such an error. The \fIextra_state argument
provided with a generalized request can be used to return information
that does not logically belong in status. Furthermore, modifying the
values in a status set internally by MPI, such as :ref:\(gaMPI_Recv\(ga, may lead to
unpredictable results and is strongly discouraged.\fP
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
FORTRAN 77 NOTES
\-\-\-\-\-\-\- \-\- \-\-\-\-\-
.sp
The MPI standard prescribes portable Fortran syntax for the \fICOUNT
argument of :ref:\(gaMPI_Status_set_elements_x\(ga only for Fortran 90. FORTRAN 77
users may use the non\-portable syntax\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
     INTEGER*MPI_COUNT_KIND COUNT

where MPI_COUNT_KIND is a constant defined in mpif.h and gives the length of the declared integer in bytes.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
