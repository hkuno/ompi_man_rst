.\" Man page generated from reStructuredText.
.
.TH "MPI_ATTR_PUT" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Attr_put\fP \- Stores attribute value associated with a key \-\- use
of this routine is deprecated.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INCLUDE \(aqmpif.h\(aq
MPI_ATTR_PUT(COMM, KEYVAL, ATTRIBUTE_VAL, IERROR)
     INTEGER COMM, KEYVAL, ATTRIBUTE_VAL, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator to which attribute will be attached (handle).
.IP \(bu 2
\fBkeyval\fP: Key value, as returned by MPI_KEYVAL_CREATE (integer).
.IP \(bu 2
\fBattribute_val\fP: Attribute value.
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Note that use of this routine is \fIdeprecated as of MPI\-2, and\fP was
\fIdeleted in MPI\-3. Please use :ref:\(gaMPI_Comm_set_attr\(ga. This\fP function does not
have a mpi_f08 binding.
.sp
\fI\%MPI_Attr_put\fP stores the stipulated attribute value attribute_val for
subsequent retrieval by MPI_Attr_get\&. If the value is already present,
then the outcome is as if MPI_Attr_delete was first called to delete the
previous value (and the callback function delete_fn was executed), and a
new value was next stored. The call is erroneous if there is no key with
value keyval; in particular MPI_KEYVAL_INVALID is an erroneous key
value. The call will fail if the delete_fn function returned an error
code other than MPI_SUCCESS.
.SH NOTES
.sp
Values of the permanent attributes MPI_TAG_UB, MPI_HOST, MPI_IO, and
MPI_WTIME_IS_GLOBAL may not be changed.
.sp
The type of the attribute value depends on whether C or Fortran is being
used. In C, an attribute value is a pointer (void *); in Fortran, it is
a single integer (not a pointer, since Fortran has no pointers and there
are systems for which a pointer does not fit in an integer, e.g., any
32\-bit address system that uses 64 bits for Fortran DOUBLE PRECISION).
.sp
If an attribute is already present, the delete function (specified when
the corresponding keyval was created) will be called.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Comm_set_attr
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
