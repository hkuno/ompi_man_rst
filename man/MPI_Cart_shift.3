.\" Man page generated from reStructuredText.
.
.TH "MPI_CART_SHIFT" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Cart_shift\fP \- Returns the shifted source and destination ranks,
given a shift direction and amount.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Cart_shift(MPI_Comm comm, int direction, int disp,
    int *rank_source, int *rank_dest)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_CART_SHIFT(COMM, DIRECTION, DISP, RANK_SOURCE,
        RANK_DEST, IERROR)
    INTEGER COMM, DIRECTION, DISP, RANK_SOURCE
    INTEGER RANK_DEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Cart_shift(comm, direction, disp, rank_source, rank_dest, ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, INTENT(IN) :: direction, disp
    INTEGER, INTENT(OUT) :: rank_source, rank_dest
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP : Communicator with Cartesian structure (handle).
.IP \(bu 2
\fBdirection\fP : Coordinate dimension of shift (integer).
.IP \(bu 2
\fBdisp\fP : Displacement ( > 0: upward shift, < 0: downward shift)
(integer).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrank_source\fP : Rank of source process (integer).
.IP \(bu 2
\fBrank_dest\fP : Rank of destination process (integer).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
If the process topology is a Cartesian structure, an MPI_Sendrecv
operation is likely to be used along a coordinate \fBdirection\fP to
perform a shift of data. As input, MPI_Sendrecv takes the rank of a
source process for the receive, and the rank of a destination process
for the send. If the function \fI\%MPI_Cart_shift\fP is called for a
Cartesian process group, it provides the calling process with the above
identifiers, which then can be passed to MPI_Sendrecv\&. The user
specifies the coordinate \fBdirection\fP and the size of the step
(positive or negative). The function is local.
.sp
The \fBdirection\fP argument indicates the dimension of the shift, i.e.,
the coordinate whose value is modified by the shift. The coordinates are
numbered from 0 to ndims\-1, where ndims is the number of dimensions.
.sp
Note: The \fBdirection\fP argument is in the range [0, n\-1] for an
n\-dimensional Cartesian mesh.
.sp
Depending on the periodicity of the Cartesian group in the specified
coordinate \fBdirection\fP, \fI\%MPI_Cart_shift\fP provides the identifiers
for a circular or an end\-off shift. In the case of an end\-off shift, the
value MPI_PROC_NULL may be returned in \fBrank_source\fP or
\fBrank_dest\fP, indicating that the source or the destination for the
shift is out of range.
.sp
Example: The \fBcomm\fPunicator, \fBcomm\fP, has a two\-dimensional,
periodic, Cartesian topology associated with it. A two\-dimensional array
of REALs is stored one element per process, in variable A. One wishes to
skew this array, by shifting column i (vertically, i.e., along the
column) by i steps.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
! find process rank
    CALL MPI_COMM_RANK(comm, rank, ierr)
! find Cartesian coordinates
    CALL MPI_CART_COORDS(comm, rank, maxdims, coords, ierr)
! compute shift source and destination
    CALL MPI_CART_SHIFT(comm, 0, coords(2), source, dest, ierr)
! skew array
    CALL MPI_SENDRECV_REPLACE(A, 1, MPI_REAL, dest, 0, source, 0, comm, status,
                              ierr)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH NOTE
.sp
In Fortran, the dimension indicated by DIRECTION = i has DIMS(i+1)
nodes, where DIMS is the array that was used to create the grid. In C,
the dimension indicated by direction = i is the dimension specified by
dims[i].
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
