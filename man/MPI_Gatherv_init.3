.\" Man page generated from reStructuredText.
.
.TH "MPI_GATHERV_INIT" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH MPI_GATHERV

.sp
.ce
----

.ce 0
.sp
.sp
MPI_Gatherv, MPI_Igatherv, MPI_Gatherv_init \- Gathers
varying amounts of data from all processes to the root process
.SS Syntax
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype,
    int root, MPI_Comm comm)

int MPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype,
    int root, MPI_Comm comm, MPI_Request *request)

int MPI_Gatherv_init(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype,
    int root, MPI_Comm comm, MPI_Info info, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_GATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,
        DISPLS, RECVTYPE, ROOT, COMM, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*)
    INTEGER RECVTYPE, ROOT, COMM, IERROR

MPI_IGATHERV(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,
        DISPLS, RECVTYPE, ROOT, COMM, REQUEST, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*)
    INTEGER RECVTYPE, ROOT, COMM, REQUEST, IERROR

MPI_GATHERV_INIT(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNTS,
        DISPLS, RECVTYPE, ROOT, COMM, INFO, REQUEST, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNTS(*), DISPLS(*)
    INTEGER RECVTYPE, ROOT, COMM, INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Gatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs,
        recvtype, root, comm, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
    TYPE(*), DIMENSION(..) :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*), root
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Igatherv(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs,
        recvtype, root, comm, request, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, root
    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Gatherv_init(sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs,
        recvtype, root, comm, info, request, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, root
    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Info), INTENT(IN) :: info
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Input Parameters
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP : Starting address of send buffer (choice).
.IP \(bu 2
\fBsendcount\fP : Number of elements in send buffer (integer).
.IP \(bu 2
\fBsendtype\fP : Datatype of send buffer elements (handle).
.IP \(bu 2
\fBrecvcounts\fP : Integer array (of length group size) containing the
number of elements that are received from each process (significant
only at root).
.IP \(bu 2
\fBdispls\fP : Integer array (of length group size). Entry i specifies
the displacement relative to recvbuf at which to place the incoming
data from process i (significant only at root).
.IP \(bu 2
\fBrecvtype\fP : Datatype of recv buffer elements (significant only at
root) (handle).
.IP \(bu 2
\fBroot\fP : Rank of receiving process (integer).
.IP \(bu 2
\fBcomm\fP : Communicator (handle).
.IP \(bu 2
\fBinfo\fP : Info (handle, persistent only).
.UNINDENT
.SS Output Parameters
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP : Address of receive buffer (choice, significant only at
root).
.IP \(bu 2
\fBrequest\fP : Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SS Description
.sp
MPI_Gatherv extends the functionality of MPI_Gather by allowing
a varying count of data from each process, since \fBrecvcounts\fP is now
an array. It also allows more flexibility as to where the data is placed
on the root, by providing the new argument, \fBdispls\fP\&.
.sp
The outcome is as if each process, including the root process, sends a
message to the root,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Send(sendbuf, sendcount, sendtype, root, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and the root executes n receives,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Recv(recvbuf + disp[i] * extent(recvtype),
    recvcounts[i], recvtype, i, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Messages are placed in the receive buffer of the root process in rank
order, that is, the data sent from process j is placed in the jth
portion of the receive buffer \fBrecvbuf\fP on process root. The jth
portion of \fBrecvbuf\fP begins at offset displs[j] elements (in terms of
\fBrecvtype\fP) into \fBrecvbuf\fP\&.
.sp
The receive buffer is ignored for all nonroot processes.
.sp
The type signature implied by \fBsendcount\fP, \fBsendtype\fP on process i
must be equal to the type signature implied by \fBrecvcounts[i]\fP,
\fBrecvtype\fP at the root. This implies that the amount of data sent must
be equal to the amount of data received, pairwise between each process
and the root. Distinct type maps between sender and receiver are still
allowed, as illustrated in Example 2, below.
.sp
All arguments to the function are significant on process \fBroot\fP, while
on other processes, only arguments \fBsendbuf\fP, \fBsendcount\fP,
\fBsendtype\fP, \fBroot\fP, \fBcomm\fP are significant. The arguments \fBroot\fP
and \fBcomm\fP must have identical values on all processes.
.sp
The specification of counts, types, and displacements should not cause
any location on the \fBroot\fP to be written more than once. Such a call
is erroneous.
.sp
Example 1: Now have each process send 100 ints to \fBroot\fP, but place
each set (of 100) stride ints apart at receiving end. Use
\fBMPI_Gatherv\fP and the \fBdispls\fP argument to achieve this effect.
Assume stride >= 100.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100];
int root, *rbuf, stride;
int *displs,i,*rcounts;
//      ...
MPI_Comm_size(comm, &gsize);
rbuf = (int *)malloc(gsize*stride*sizeof(int));
displs = (int *)malloc(gsize*sizeof(int));
rcounts = (int *)malloc(gsize*sizeof(int));
for (i=0; i<gsize; ++i) {
    displs[i] = i*stride;
    rcounts[i] = 100;
}
MPI_Gatherv(sendarray, 100, MPI_INT, rbuf, rcounts,
    displs, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that the program is erroneous if stride < 100.
.sp
Example 2: Same as Example 1 on the receiving side, but send the 100
ints from the 0th column of a 100 150 int array, in C.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100][150];
int root, *rbuf, stride;
MPI_Datatype stype;
int *displs,i,*rcounts;
//      ...
MPI_Comm_size(comm, &gsize);
rbuf = (int *)malloc(gsize*stride*sizeof(int));
displs = (int *)malloc(gsize*sizeof(int));
rcounts = (int *)malloc(gsize*sizeof(int));
for (i=0; i<gsize; ++i) {
    displs[i] = i*stride;
    rcounts[i] = 100;
}
/* Create datatype for 1 column of array
 */
MPI_Type_vector(100, 1, 150, MPI_INT, &stype);
MPI_Type_commit( &stype );
MPI_Gatherv(sendarray, 1, stype, rbuf, rcounts,
    displs, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 3: Process i sends (100\-i) ints from the ith column of a 100 x
150 int array, in C. It is received into a buffer with stride, as in the
previous two examples.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100][150],*sptr;
int root, *rbuf, stride, myrank;
MPI_Datatype stype;
int *displs,i,*rcounts;
//      ...
MPI_Comm_size(comm, &gsize);
MPI_Comm_rank( comm, &myrank );
rbuf = (int *)malloc(gsize*stride*sizeof(int));
displs = (int *)malloc(gsize*sizeof(int));
rcounts = (int *)malloc(gsize*sizeof(int));
for (i=0; i<gsize; ++i) {
    displs[i] = i*stride;
    rcounts[i] = 100\-i;  /* note change from previous example */
}
/* Create datatype for the column we are sending
 */
MPI_Type_vector(100\-myrank, 1, 150, MPI_INT, &stype);
MPI_Type_commit( &stype );
/* sptr is the address of start of "myrank" column
 */
sptr = &sendarray[0][myrank];
MPI_Gatherv(sptr, 1, stype, rbuf, rcounts, displs, MPI_INT,
   root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that a different amount of data is received from each process.
.sp
Example 4: Same as Example 3, but done in a different way at the sending
end. We create a datatype that causes the correct striding at the
sending end so that we read a column of a C array.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100][150],*sptr;
int root, *rbuf, stride, myrank, disp[2], blocklen[2];
MPI_Datatype stype,type[2];
int *displs,i,*rcounts;
//      ...
MPI_Comm_size(comm, &gsize);
MPI_Comm_rank( comm, &myrank );
rbuf = (int *)alloc(gsize*stride*sizeof(int));
displs = (int *)malloc(gsize*sizeof(int));
rcounts = (int *)malloc(gsize*sizeof(int));
for (i=0; i<gsize; ++i) {
    displs[i] = i*stride;
    rcounts[i] = 100\-i;
}
/* Create datatype for one int, with extent of entire row
 */
disp[0] = 0;       disp[1] = 150*sizeof(int);
type[0] = MPI_INT; type[1] = MPI_UB;
blocklen[0] = 1;   blocklen[1] = 1;
MPI_Type_struct( 2, blocklen, disp, type, &stype );
MPI_Type_commit( &stype );
sptr = &sendarray[0][myrank];
MPI_Gatherv(sptr, 100\-myrank, stype, rbuf, rcounts,
    displs, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 5: Same as Example 3 at sending side, but at receiving side we
make the stride between received blocks vary from block to block.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100][150],*sptr;
int root, *rbuf, *stride, myrank, bufsize;
MPI_Datatype stype;
int *displs,i,*rcounts,offset;
//      ...
MPI_Comm_size( comm, &gsize);
MPI_Comm_rank( comm, &myrank );
de = (int *)malloc(gsize*sizeof(int));
//         ...
/* stride[i] for i = 0 to gsize\-1 is set somehow
 */
/*set up displs and rcounts vectors first
 */
displs = (int *)malloc(gsize*sizeof(int));
rcounts = (int *)malloc(gsize*sizeof(int));
offset = 0;
for (i=0; i<gsize; ++i) {
    displs[i] = offset;
    offset += stride[i];
    rcounts[i] = 100\-i;
}
/* the required buffer size for rbuf is now easily obtained
 */
bufsize = displs[gsize\-1]+rcounts[gsize\-1];
rbuf = (int *)malloc(bufsize*sizeof(int));
/* Create datatype for the column we are sending
 */
MPI_Type_vector(100\-myrank, 1, 150, MPI_INT, &stype);
MPI_Type_commit( &stype );
sptr = &sendarray[0][myrank];
MPI_Gatherv(sptr, 1, stype, rbuf, rcounts,
    displs, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 6: Process i sends num ints from the ith column of a 100 x 150
int array, in C. The complicating factor is that the various values of
num are not known to \fBroot\fP, so a separate gather must first be run to
find these out. The data is placed contiguously at the receiving end.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100][150],*sptr;
int root, *rbuf, stride, myrank, disp[2], blocklen[2];
MPI_Datatype stype,types[2];
int *displs,i,*rcounts,num;
//      ...
MPI_Comm_size( comm, &gsize);
MPI_Comm_rank( comm, &myrank );
/*First, gather nums to root
 */
rcounts = (int *)malloc(gsize*sizeof(int));
MPI_Gather( &num, 1, MPI_INT, rcounts, 1, MPI_INT, root, comm);
/* root now has correct rcounts, using these we set
 * displs[] so that data is placed contiguously (or
 * concatenated) at receive end
 */
displs = (int *)malloc(gsize*sizeof(int));
displs[0] = 0;
for (i=1; i<gsize; ++i) {
    displs[i] = displs[i\-1]+rcounts[i\-1];
}
/* And, create receive buffer
 */
rbuf = (int *)malloc(gsize*(displs[gsize\-1]+rcounts[gsize\-1])
        *sizeof(int));
/* Create datatype for one int, with extent of entire row
 */
disp[0] = 0;       disp[1] = 150*sizeof(int);
type[0] = MPI_INT; type[1] = MPI_UB;
blocklen[0] = 1;   blocklen[1] = 1;
MPI_Type_struct( 2, blocklen, disp, type, &stype );
MPI_Type_commit( &stype );
sptr = &sendarray[0][myrank];
MPI_Gatherv(sptr, num, stype, rbuf, rcounts,
            displs, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Use Of In\-Place Option
.sp
The in\-place option operates in the same way as it does for
MPI_Gather\&.\(ga\(ga When the communicator is an intracommunicator, you can
perform a gather operation in\-place (the output buffer is used as the
input buffer). Use the variable MPI_IN_PLACE as the value of the
root process \fBsendbuf\fP\&. In this case, \fBsendcount\fP and \fBsendtype\fP
are ignored, and the contribution of the \fBroot\fP process to the
gathered vector is assumed to already be in the correct place in the
receive buffer.
.sp
Note that MPI_IN_PLACE is a special kind of value; it has the same
restrictions on its use as MPI_BOTTOM.\(ga\(ga
.sp
Because the in\-place option converts the receive buffer into a
send\-and\-receive buffer, a Fortran binding that includes INTENT must
mark these as INOUT, not OUT.
.SS When Communicator Is An Inter\-Communicator
.sp
When the communicator is an inter\-communicator, the \fBroot\fP process in
the first group gathers data from all the processes in the second group.
The first group defines the root process. That process uses MPI_ROOT
as the value of its \fBroot\fP argument. The remaining processes use
MPI_PROC_NULL as the value of their \fBroot\fP argument. All processes
in the second group use the rank of that root process in the first group
as the value of their \fBroot\fP argument. The send buffer argument of the
processes in the first group must be consistent with the receive buffer
argument of the \fBroot\fP process in the second group.
.SS Errors
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Gather MPI_Scatter MPI_Scatterv
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
