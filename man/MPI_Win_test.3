.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_TEST" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_test\fP \- Attempts to complete an RMA exposure epoch; a
nonblocking version of MPI_Win_wait
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Win_test(MPI_Win win, int *flag)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_TEST( WIN, FLAG, IERROR)
     INTEGER  WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_test(win, flag, ierror)
     TYPE(MPI_Win), INTENT(IN) :: win
     LOGICAL, INTENT(OUT) :: flag
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBwin\fP: Window object (handle)
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.IP \(bu 2
\fBflag\fP: The returning state of the test for epoch closure.
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_test\fP is a one\-sided MPI communication synchronization call, a
nonblocking version of MPI_Win_wait\&. It returns \fIflag = true\fP if
MPI_Win_wait would return, \fIflag = false\fP otherwise. The effect of
return of \fI\%MPI_Win_test\fP with \fIflag = true\fP is the same as the effect of a
return of MPI_Win_wait\&. If \fIflag = false\fP is returned, then the call has
no visible effect.
.sp
Invoke \fI\%MPI_Win_test\fP only where MPI_Win_wait can be invoked. Once the
call has returned \fIflag = true\fP, it must not be invoked anew, until the
window is posted anew.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Win_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Win_post MPI_Win_wait
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
