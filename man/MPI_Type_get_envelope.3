.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_GET_ENVELOPE" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_get_envelope\fP \- Returns information about input arguments
associated with a data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_get_envelope(MPI_Datatype datatype, int *num_integers,
     int *num_addresses, int *num_datatypes, int *combiner)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_GET_ENVELOPE(DATATYPE, NUM_INTEGERS, NUM_ADDRESSES,
             NUM_DATATYPES, COMBINER, IERROR)
     INTEGER DATATYPE, NUM_INTEGERS, NUM_ADDRESSES
     INTEGER NUM_DATATYPES, COMBINER, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_get_envelope(datatype, num_integers, num_addresses, num_datatypes,
             combiner, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(OUT) :: num_integers, num_addresses, num_datatypes,
     combiner
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETER
\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Data type to access (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBnum_integers\fP: Number of input integers used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBnum_addresses\fP: Number of input addresses used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBnum_datatypes\fP: Number of input data types used in the call constructing \fIcombiner\fP (nonnegative integer).
.IP \(bu 2
\fBcombiner\fP: Combiner (state).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
For the given data type, \fI\%MPI_Type_get_envelope\fP returns information on
the number and type of input arguments used in the call that created the
data type. The number\-of\-arguments values returned can be used to
provide sufficiently large arrays in the decoding routine
MPI_Type_get_contents\&. This call and the meaning of the returned values
is described below. The combiner reflects the MPI data type constructor
call that was used in creating \fIdatatype\fP\&.
.SH NOTES
.sp
These are the values that can be returned in \fIcombiner\fP and their
associated calls:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Values                          Associated Calls

MPI_COMBINER_NAMED              a named predefined data type
MPI_COMBINER_DUP                MPI_Type_dup
MPI_COMBINER_CONTIGUOUS         MPI_Type_contiguous
MPI_COMBINER_VECTOR             MPI_Type_vector
MPI_COMBINER_HVECTOR_INTEGER    MPI_Type_hvector from Fortran
MPI_COMBINER_HVECTOR            MPI_Type_hvector from C
                                  and MPI_Type_create for
                                  all languages
MPI_COMBINER_INDEXED            MPI_Type_indexed
MPI_COMBINER_HINDEXED_INTEGER   MPI_Type_hindexed from Fortran
MPI_COMBINER_HINDEXED           MPI_Type_hindexed from C
                                  and MPI_Type_create_hindexed
                                  for all languages
MPI_COMBINER_INDEXED_BLOCK      MPI_Type_create_indexed_block
MPI_COMBINER_STRUCT_INTEGER     MPI_Type_struct from Fortran
MPI_COMBINER_STRUCT             MPI_Type_struct from C
                                  and MPI_Type_create_struct
                                  for all languages
MPI_COMBINER_SUBARRAY           MPI_Type_create_subarray
MPI_COMBINER_DARRAY             MPI_Type_create_darray
MPI_COMBINER_F90_REAL           MPI_Type_create_f90_real
MPI_COMBINER_F90_COMPLEX        MPI_Type_create_f90_complex
MPI_COMBINER_F90_INTEGER        MPI_Type_create_f90_integer
MPI_COMBINER_RESIZED            MPI_Type_create_resized
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If \fIcombiner\fP is MPI_COMBINER_NAMED, then \fIdatatype\fP is a named
predefined data type.
.sp
The actual arguments used in the creation call for a data type can be
obtained from the call MPI_Type_get_contents\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Type_get_contents
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
