.\" Man page generated from reStructuredText.
.
.TH "MPI_COMPARE_AND_SWAP" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Compare_and_swap\fP \- Perform RMA compare\-and\-swap
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Compare_and_swap(const void *origin_addr, const void *compare_addr,
     void *result_addr, MPI_Datatype datatype, int target_rank,
     MPI_Aint target_disp, MPI_Win win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_COMPARE_AND_SWAP(ORIGIN_ADDR, COMPARE_ADDR, RESULT_ADDR, DATATYPE, TARGET_RANK,
     TARGET_DISP, WIN, IERROR)
     <type> ORIGIN_ADDR, COMPARE_ADDR, RESULT_ADDR(*)
     INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
     INTEGER DATATYPE, TARGET_RANK, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Compare_and_swap(origin_addr, compare_addr, result_addr, datatype,
             target_rank, target_disp, win, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr, compare_addr
     TYPE(*), DIMENSION(..) :: result_addr
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(IN) :: target_rank
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp
     TYPE(MPI_Win), INTENT(IN) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBorigin_addr\fP: Initial address of buffer (choice).
.IP \(bu 2
\fBcompare_addr\fP: Initial address of compare buffer (choice).
.IP \(bu 2
\fBresult_addr\fP: Initial address of result buffer (choice).
.IP \(bu 2
\fBdatatype\fP: Data type of the entry in origin, result, and target buffers (handle).
.IP \(bu 2
\fBtarget_rank\fP: Rank of target (nonnegative integer).
.IP \(bu 2
\fBtarget_disp\fP: Displacement from start of window to beginning of target buffer (nonnegative integer).
.IP \(bu 2
\fBwin\fP: Window object (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function compares one element of type \fIdatatype\fP in the compare
buffer \fIcompare_addr\fP with the buffer at offset \fItarget_disp\fP in the
target window specified by \fItarget_rank\fP and \fIwin\fP and replaces the
value at the target with the value in the origin buffer \fIorigin_addr\fP if
the compare buffer and the target buffer are identical. The original
value at the target is returned in the buffer \fIresult_addr\fP\&. The
parameter \fIdatatype\fP must belong to one of the following categories of
predefined datatypes: C integer, Fortran integer, Logical,
Multi\-language types, or Byte as specified in MPI\-3 ยง 5.9.2 on page 176.
.sp
The origin and result buffers (\fIorigin_addr\fP and \fIresult_addr\fP) must be
disjoint.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the
\fITARGET_DISP\fP argument only for Fortran 90. FORTRAN 77 users may use the
non\-portable syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND TARGET_DISP
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
It is the user\(aqs responsibility to guarantee that, when using the
accumulate functions, the target displacement argument is such that
accesses to the window are properly aligned according to the data type
arguments in the call to the \fI\%MPI_Compare_and_swap\fP function.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned. Note
that MPI does not guarantee that an MPI program can continue past an
error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
