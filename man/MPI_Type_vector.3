.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_VECTOR" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_vector\fP \- Creates a vector (strided) datatype.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_vector(int count, int blocklength, int stride,
     MPI_Datatype oldtype, MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_VECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE,
             IERROR)
     INTEGER COUNT, BLOCKLENGTH, STRIDE, OLDTYPE
     INTEGER NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_vector(count, blocklength, stride, oldtype, newtype, ierror)
     INTEGER, INTENT(IN) :: count, blocklength, stride
     TYPE(MPI_Datatype), INTENT(IN) :: oldtype
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of blocks (nonnegative integer).
.IP \(bu 2
\fBblocklength\fP: Number of elements in each block (nonnegative integer).
.IP \(bu 2
\fBstride\fP: Number of elements between start of each block (integer).
.IP \(bu 2
\fBoldtype\fP: Old datatype (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New datatype (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The function \fI\%MPI_Type_vector\fP is a general constructor that allows
replication of a datatype into locations that consist of equally spaced
blocks. Each block is obtained by concatenating the same number of
copies of the old datatype. The spacing between blocks is a multiple of
the extent of the old datatype.
.sp
\fBExample 1:\fP Assume, again, that oldtype has type map {(double, 0),
(char, 8)}, with extent 16. A call to MPI_Type_vector(2, 3, 4, oldtype,
newtype) will create the datatype with type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 0), (char, 8), (double, 16), (char, 24),
(double, 32), (char, 40),
(double, 64), (char, 72),
(double, 80), (char, 88), (double, 96), (char, 104)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That is, two blocks with three copies each of the old type, with a
stride of 4 elements (4 x 16 bytes) between the blocks.
.sp
\fBExample 2:\fP A call to MPI_Type_vector(3, 1, \-2, oldtype, newtype)
will create the datatype
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 0), (char, 8), (double, \-32), (char, \-24),
(double, \-64), (char, \-56)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In general, assume that oldtype has type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ..., (type(n\-1), disp(n\-1))},
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
with extent ex. Let bl be the blocklength. The newly created datatype
has a type map with count x bl x n entries:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ..., (type(n\-1), disp(n\-1)),
(type(0), disp(0) + ex), ..., (type(n\-1), disp(n\-1) + ex), ...,
(type(0), disp(0) + (bl \-1) * ex),...,
(type(n\-1), disp(n\-1) + (bl \-1)* ex),
(type(0), disp(0) + stride * ex),..., (type(n\-1),
disp(n\-1) + stride * ex), ...,
(type(0), disp(0) + (stride + bl \- 1) * ex), ...,
(type(n\-1), disp(n\-1) + (stride + bl \-1) * ex), ...,
(type(0), disp(0) + stride * (count \-1) * ex), ...,
(type(n\-1), disp(n\-1) + stride * (count \-1) * ex), ...,
(type(0), disp(0) + (stride * (count \-1) + bl \-1) * ex), ...,
(type(n\-1), disp(n\-1) + (stride * (count \-1) + bl \-1) * ex)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A call to MPI_Type_contiguous(count, oldtype, newtype) is equivalent to
a call to MPI_Type_vector(count, 1, 1, oldtype, newtype), or to a call
to MPI_Type_vector(1, count, n, oldtype, newtype), n arbitrary.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Type_create_hvector | MPI_Type_hvector
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
