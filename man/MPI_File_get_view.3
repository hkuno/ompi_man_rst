.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_GET_VIEW" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_get_view\fP \- Returns the process\(aqs view of data in the file.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_File_get_view(MPI_File fh, MPI_Offset *disp,
     MPI_Datatype *etype, MPI_Datatype *filetype,
     char *datarep)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_GET_VIEW(FH, DISP, ETYPE,
     FILETYPE, DATAREP, IERROR)
     INTEGER FH, ETYPE, FILETYPE, IERROR
     CHARACTER*(*)   DATAREP
     INTEGER(KIND=MPI_OFFSET_KIND)   DISP
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_get_view(fh, disp, etype, filetype, datarep, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp
     TYPE(MPI_Datatype), INTENT(OUT) :: etype, filetype
     CHARACTER(LEN=*), INTENT(OUT) :: datarep
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: File handle (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBdisp\fP: Displacement (integer).
.IP \(bu 2
\fBetype\fP: Elementary data type (handle).
.IP \(bu 2
\fBfiletype\fP: File type (handle). See Restrictions, below.
.IP \(bu 2
\fBdatarep\fP: Data representation (string).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The \fI\%MPI_File_get_view\fP routine returns the process\(aqs view of the data in
the file. The current values of the displacement, etype, and filetype
are returned in \fIdisp,\fP \fIetype,\fP and \fIfiletype,\fP respectively.
.sp
The \fI\%MPI_File_get_view\fP interface allows the user to pass a
data\-representation string via the \fIdatarep\fP argument.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the \fIDISP\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_OFFSET_KIND DISP
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
