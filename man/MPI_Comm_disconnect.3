.\" Man page generated from reStructuredText.
.
.TH "MPI_COMM_DISCONNECT" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..

.sp
.ce
----

.ce 0
.sp
.sp
\fI\%MPI_Comm_disconnect\fP \- Deallocates communicator object and sets
handle to MPI_COMM_NULL.\(ga\(ga
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Comm_disconnect(MPI_Comm *comm)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_COMM_DISCONNECT(COMM, IERROR)
    INTEGER COMM, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Comm_disconnect(comm, ierror)
    TYPE(MPI_Comm), INTENT(INOUT) :: comm
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Input/Output Parameter
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP : Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Comm_disconnect\fP waits for all pending communication on \fBcomm\fP
to complete internally, deallocates the communicator object, and sets
the handle to MPI_COMM_NULL. It is a collective operation. It may
not be called with the communicator MPI_COMM_WORLD or
MPI_COMM_SELF.\(ga\(ga \fI\%MPI_Comm_disconnect\fP may be called only if all
communication is complete and matched, so that buffered data can be
delivered to its destination. This requirement is the same as for
MPI_Finalize\&.\(ga\(ga \fI\%MPI_Comm_disconnect\fP has the same action as
MPI_Comm_free, except that it waits for pending communication to
finish internally and enables the guarantee about the behavior of
disconnected processes.
.SH NOTES
.sp
To disconnect two processes you may need to call
\fI\%MPI_Comm_disconnect\fP,\(ga\(ga MPI_Win_free, and MPI_File_close to
remove all communication paths between the two processes. Note that it
may be necessary to disconnect several communicators (or to free several
windows or files) before two processes are completely independent.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Comm_connect MPI_Comm_accept
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
