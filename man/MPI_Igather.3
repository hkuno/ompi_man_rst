.\" Man page generated from reStructuredText.
.
.TH "MPI_IGATHER" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Gather, \fI\%MPI_Igather\fP, MPI_Gather_init \- Gathers values
from a group of processes.
.SH SYNOPSIS
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
    MPI_Comm comm)

int MPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
    MPI_Comm comm, MPI_Request *request)

int MPI_Gather_init(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
    void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
    MPI_Comm comm, MPI_Info info, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_GATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
        RECVTYPE, ROOT, COMM, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
    INTEGER COMM, IERROR

MPI_IGATHER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
        RECVTYPE, ROOT, COMM, REQUEST, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
    INTEGER COMM, REQUEST, IERROR

MPI_GATHER_INIT(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
        RECVTYPE, ROOT, COMM, INFO, REQUEST, IERROR)
    <type>  SENDBUF(*), RECVBUF(*)
    INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
    INTEGER COMM, INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Gather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
        root, comm, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
    TYPE(*), DIMENSION(..) :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, recvcount, root
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Igather(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
        root, comm, request, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, recvcount, root
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Gather_init(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
        root, comm, info, request, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
    INTEGER, INTENT(IN) :: sendcount, recvcount, root
    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Info), INTENT(IN) :: info
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP : Starting address of send buffer (choice).
.IP \(bu 2
\fBsendcount\fP : Number of elements in send buffer (integer).
.IP \(bu 2
\fBsendtype\fP : Datatype of send buffer elements (handle).
.IP \(bu 2
\fBrecvcount\fP : Number of elements for any single receive (integer,
significant only at root).
.IP \(bu 2
\fBrecvtype\fP : Datatype of recvbuffer elements (handle, significant
only at root).
.IP \(bu 2
\fBroot\fP : Rank of receiving process (integer).
.IP \(bu 2
\fBcomm\fP : Communicator (handle).
.IP \(bu 2
\fBinfo\fP : Info (handle, persistent only).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP : Address of receive buffer (choice, significant only at
root).
.IP \(bu 2
\fBrequest\fP : Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Each process (root process included) sends the contents of its send
buffer to the root process. The root process receives the messages and
stores them in rank order. The outcome is as if each of the n processes
in the group (including the root process) had executed a call to
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Send(sendbuf, sendcount, sendtype, root, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and the root had executed n calls to
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Recv(recfbuf + i * recvcount * extent(recvtype), recvcount, recvtype, i, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where extent(recvtype) is the type extent obtained from a call to
\fBMPI_Type_extent()\fP\&.
.sp
An alternative description is that the n messages sent by the processes
in the group are concatenated in rank order, and the resulting message
is received by the root as if by a call to
\fBMPI_RECV(recvbuf, recvcount* n, recvtype, ... )\fP\&.
.sp
The receive buffer is ignored for all nonroot processes.
.sp
General, derived datatypes are allowed for both sendtype and recvtype.
The type signature of \fBsendcount\fP, \fBsendtype\fP on process i must be
equal to the type signature of \fBrecvcount\fP, \fBrecvtype\fP at the root.
This implies that the amount of data sent must be equal to the amount of
data received, pairwise between each process and the root. Distinct type
maps between sender and receiver are still allowed.
.sp
All arguments to the function are significant on process root, while on
other processes, only arguments \fBsendbuf\fP, \fBsendcount\fP,
\fBsendtype\fP, \fBroot\fP, \fBcomm\fP are significant. The arguments \fBroot\fP
and \fBcomm\fP must have identical values on all processes.
.sp
The specification of counts and types should not cause any location on
the root to be written more than once. Such a call is erroneous. Note
that the \fBrecvcount\fP argument at the root indicates the number of
items it receives from each process, not the total number of items it
receives.
.sp
Example 1: Gather 100 ints from every process in group to root.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100];
int root, *rbuf;
//...

MPI_Comm_size( comm, &gsize);
rbuf = (int *)malloc(gsize*100*sizeof(int));

MPI_Gather( sendarray, 100, MPI_INT, rbuf, 100, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 2: Previous example modified \-\- only the root allocates memory
for the receive buffer.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100];
int root, myrank, *rbuf;
//...

MPI_Comm_rank( comm, myrank);
if ( myrank == root) {
    MPI_Comm_size( comm, &gsize);
    rbuf = (int *)malloc(gsize*100*sizeof(int));
}
MPI_Gather( sendarray, 100, MPI_INT, rbuf, 100, MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example 3: Do the same as the previous example, but use a derived
datatype. Note that the type cannot be the entire set of gsize * 100
ints since type matching is defined pairwise between the root and each
process in the gather.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,sendarray[100];
int root, *rbuf;
MPI_Datatype rtype;
//...

MPI_Comm_size( comm, &gsize);
MPI_Type_contiguous( 100, MPI_INT, &rtype );
MPI_Type_commit( &rtype );
rbuf = (int *)malloc(gsize*100*sizeof(int));
MPI_Gather( sendarray, 100, MPI_INT, rbuf, 1, rtype, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USE OF IN-PLACE OPTION
.sp
When the communicator is an intracommunicator, you can perform a gather
operation in\-place (the output buffer is used as the input buffer). Use
the variable MPI_IN_PLACE as the value of the root process
\fBsendbuf\fP\&. In this case, \fBsendcount\fP and \fBsendtype\fP are ignored,
and the contribution of the root process to the gathered vector is
assumed to already be in the correct place in the receive buffer. Note
that MPI_IN_PLACE is a special kind of value; it has the same
restrictions on its use as MPI_BOTTOM. Because the in\-place option
converts the receive buffer into a send\-and\-receive buffer, a Fortran
binding that includes \fBINTENT\fP must mark these as \fBINOUT\fP, not
\fBOUT\fP\&.
.SH WHEN COMMUNICATOR IS AN INTER-COMMUNICATOR
.sp
When the communicator is an inter\-communicator, the root process in the
first group gathers data from all the processes in the second group. The
first group defines the root process. That process uses MPI_ROOT as the
value of its \fBroot\fP argument. The remaining processes use
MPI_PROC_NULL as the value of their \fBroot\fP argument. All processes
in the second group use the rank of that root process in the first group
as the value of their \fBroot\fP argument. The send buffer argument of the
processes in the first group must be consistent with the receive buffer
argument of the root process in the second group.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error. See the MPI man page for a full list of MPI error codes.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Gatherv MPI_Scatter MPI_Scatterv
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
