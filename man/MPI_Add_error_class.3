.\" Man page generated from reStructuredText.
.
.TH "MPI_ADD_ERROR_CLASS" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Add_error_class \- Creates a new error class and returns its value
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Add_error_class(int *errorclass)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_ADD_ERROR_CLASS(ERRORCLASS, IERROR)
     INTEGER ERRORCLASS, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Add_error_class(errorclass, ierror)
     INTEGER, INTENT(OUT) :: errorclass
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBerrorclass\fP: New error class (integer).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The function \fI\%MPI_Add_error_class\fP creates a new, local error class.
.SH NOTES
.sp
Because this function is local, the same value of \fIerrorclass\fP may not
be returned on all processes that make this call, even if they call the
function concurrently. Thus, same error on different processes may not
cause the same value of \fIerrorclass\fP to be returned. To reduce the
potential for confusion, MPI_Add_error_string may be used on multiple
processes to associate the same error string with the newly created
\fIerrorclass\fP\&. Even though \fIerrorclass\fP may not be consistent across
processes, using MPI_Add_error_string will ensure the error string
associated with it will be the same everywhere.
.sp
No function is provided to free error classes, as it is not expected
that an application will create them in significant numbers.
.sp
The value returned is always greater than or equal to MPI_ERR_LASTCODE.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Add_error_code
MPI_Add_error_string
MPI_Error_class
.INDENT 0.0
.INDENT 3.5
MPI_Error_string
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
