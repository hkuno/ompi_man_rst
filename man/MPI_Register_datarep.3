.\" Man page generated from reStructuredText.
.
.TH "MPI_REGISTER_DATAREP" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Register_datarep\fP \- Defines data representation.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Register_datarep(const char *datarep,
     MPI_Datarep_conversion_function *read_conversion_fn,
     MPI_Datarep_conversion_function *write_conversion_fn,
     MPI_Datarep_extent_function *dtype_file_extent_fn,
     void *extra_state)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_REGISTER_DATAREP(DATAREP, READ_CONVERSION_FN,
     WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN,
     EXTRA_STATE, IERROR)
     CHARACTER*(*)   DATAREP
     EXTERNAL        READ_CONVERSION_FN, WRITE_CONVERSION_FN, DTYPE_FILE_EXTENT_FN
     INTEGER IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND)  EXTRA_STATE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Register_datarep(datarep, read_conversion_fn, write_conversion_fn,
             dtype_file_extent_fn, extra_state, ierror)
     CHARACTER(LEN=*), INTENT(IN) :: datarep
     PROCEDURE(MPI_Datarep_conversion_function) :: read_conversion_fn
     PROCEDURE(MPI_Datarep_conversion_function) :: write_conversion_fn
     PROCEDURE(MPI_Datarep_extent_function) :: dtype_file_extent_fn
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBdatarep\fP: Data representation identifier (string).
.IP \(bu 2
\fBread_conversion_fn\fP: Function invoked to convert from file representation to native representation (function).
.IP \(bu 2
\fBwrite_conversion_fn\fP: Function invoked to convert from native representation to file representation (function).
.IP \(bu 2
\fBdtype_file_extent_fn\fP: Function invoked to get the extent of a data type as represented in the file (function).
.IP \(bu 2
\fBextra_state\fP: Extra state.
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Register_datarep\fP defines a data representation. It associates the
data representation\(aqs identifier (a string) with the functions that
convert from file representation to the native representation and vice
versa, with the function that gets the extent of a data type as
represented in the file, as well as with "extra state," which is used
for passing arguments. Once a data representation has been registered
using this routine, you may specify its identifier as an argument to
MPI_File_set_view, causing subsequent data\-access operations to call the
specified conversion functions.
.sp
The call associates \fIread_conversion_fn\fP, \fIwrite_conversion_fn\fP, and
\fIdtype_file_extent_fn\fP with the data representation identifier
\fIdatarep\fP\&. \fIdatarep\fP can then be used as an argument to
MPI_File_set_view, causing subsequent data access operations to call the
conversion functions to convert all data items accessed between file
data representation and native representation. \fI\%MPI_Register_datarep\fP is a
local operation and only registers the data representation for the
calling MPI process. If \fIdatarep\fP is already defined, an error in the
error class MPI_ERR_DUP_DATAREP is raised using the default file error
handler. The length of a data representation string is limited to the
value of MPI_MAX_DATAREP_STRING. MPI_MAX_DATAREP_STRING must have a
value of at least 64. No routines are provided to delete data
representations and free the associated resources; it is not expected
that an application will generate them in significant numbers.
.SH NOTES
.sp
The Fortran version of each MPI I/O routine includes a final argument,
IERROR, which is not defined in the PARAMETERS sections. This argument
is used to return the error status of the routine in the manner typical
for Fortran library routines.
.sp
The C version of each routine returns an error status as an integer
return value.
.sp
Error classes are found in mpi.h (for C) and mpif.h (for Fortran).
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
