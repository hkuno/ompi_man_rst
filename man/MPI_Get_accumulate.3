.\" Man page generated from reStructuredText.
.
.TH "MPI_GET_ACCUMULATE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..

.sp
.ce
----

.ce 0
.sp
.sp
MPI_Get_accumulate, MPI_Rget_accumulate \- Combines the contents
of the origin buffer with that of a target buffer and returns the target
buffer value.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Get_accumulate(const void *origin_addr, int origin_count,
    MPI_Datatype origin_datatype, void *result_addr,
    int result_count, MPI_Datatype result_datatype,
    int target_rank, MPI_Aint target_disp, int target_count,
    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)

int MPI_Rget_accumulate(const void *origin_addr, int origin_count,
    MPI_Datatype origin_datatype, void *result_addr,
    int result_count, MPI_Datatype result_datatype,
    int target_rank, MPI_Aint target_disp, int target_count,
    MPI_Datatype target_datatype, MPI_Op op, MPI_Win win,
    MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (See Fortran 77 Notes)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_GET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,
        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,
        TARGET_DATATYPE, OP, WIN, IERROR)
    <type> ORIGIN_ADDR, RESULT_ADDR(*)
    INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, IERROR

MPI_RGET_ACCUMULATE(ORIGIN_ADDR, ORIGIN_COUNT, ORIGIN_DATATYPE, RESULT_ADDR,
        RESULT_COUNT, RESULT_DATATYPE, TARGET_RANK, TARGET_DISP, TARGET_COUNT,
        TARGET_DATATYPE, OP, WIN, REQUEST, IERROR)
    <type> ORIGIN_ADDR, RESULT_ADDR(*)
    INTEGER(KIND=MPI_ADDRESS_KIND) TARGET_DISP
    INTEGER ORIGIN_COUNT, ORIGIN_DATATYPE, TARGET_COUNT, TARGET_DATATYPE,
        TARGET_RANK, TARGET_COUNT, TARGET_DATATYPE, OP, WIN, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Get_accumulate(origin_addr, origin_count, origin_datatype, result_addr,
        result_count, result_datatype, target_rank, target_disp,
        target_count, target_datatype, op, win, ierror)
    TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr
    TYPE(*), DIMENSION(..) :: result_addr
    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count
    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype
    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist
    TYPE(MPI_Op), INTENT(IN) :: op
    TYPE(MPI_Win), INTENT(IN) :: win
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Rget_accumulate(origin_addr, origin_count, origin_datatype,
        result_addr, result_count, result_datatype, target_rank,
        target_disp, target_count, target_datatype, op, win, request,
        ierror)
    TYPE(*), DIMENSION(..), INTENT(IN) :: origin_addr
    TYPE(*), DIMENSION(..) :: result_addr
    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count
    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype
    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_dist
    TYPE(MPI_Op), INTENT(IN) :: op
    TYPE(MPI_Win), INTENT(IN) :: win
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBorigin_addr\fP : Initial address of buffer (choice).
.IP \(bu 2
\fBorigin_count\fP : Number of entries in buffer (nonnegative integer).
.IP \(bu 2
\fBorigin_datatype\fP : Data type of each buffer entry (handle).
.IP \(bu 2
\fBresult_addr\fP : Initial address of result buffer (choice).
.IP \(bu 2
\fBresult_count\fP : Number of entries in result buffer (nonnegative
integer).
.IP \(bu 2
\fBresult_datatype\fP : Data type of each result buffer entry (handle).
.IP \(bu 2
\fBtarget_rank\fP : Rank of target (nonnegative integer).
.IP \(bu 2
\fBtarget_disp\fP : Displacement from start of window to beginning of
target buffer (nonnegative integer).
.IP \(bu 2
\fBtarget_count\fP : Number of entries in target buffer (nonnegative
integer).
.IP \(bu 2
\fBtarget_datatype\fP : Data type of each entry in target buffer
(handle).
.IP \(bu 2
\fBop\fP : Reduce operation (handle).
.IP \(bu 2
\fBwin\fP : Window object (handle).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
MPI_Rget_accumulate: RMA request
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Get_accumulate is a function used for one\-sided MPI
communication that adds the contents of the origin buffer (as defined by
\fBorigin_addr\fP, \fBorigin_count\fP, and \fBorigin_datatype\fP) to the
buffer specified by the arguments \fBtarget_count\fP and
\fBtarget_datatype\fP, at offset \fBtarget_disp\fP, in the target window
specified by \fBtarget_rank\fP and \fBwin\fP, using the operation \fBop\fP\&.
MPI_Get_accumulate returns in the result buffer \fBresult_addr\fP the
contents of the target buffer before the accumulation.
.sp
Any of the predefined operations for MPI_Reduce, as well as
MPI_NO_OP,\(ga\(ga can be used. User\-defined functions cannot be used. For
example, if \fBop\fP is MPI_SUM, each element of the origin buffer is
added to the corresponding element in the target, replacing the former
value in the target.
.sp
Each datatype argument must be a predefined data type or a derived data
type, where all basic components are of the same predefined data type.
Both datatype arguments must be constructed from the same predefined
data type. The operation \fBop\fP applies to elements of that predefined
type. The \fBtarget_datatype\fP argument must not specify overlapping
entries, and the target buffer must fit in the target window.
.sp
A new predefined operation, MPI_REPLACE, is defined. It corresponds
to the associative function f(a, b) =b; that is, the current value in
the target memory is replaced by the value supplied by the origin.
.sp
A new predefined operation, MPI_NO_OP, is defined. It corresponds to
the assiciative function f(a, b) = a; that is the current value in the
target memory is returned in the result buffer at the origin and no
operation is performed on the target buffer.
.sp
MPI_Rget_accumulate is similar to MPI_Get_accumulate, except
that it allocates a communication request object and associates it with
the request handle (the argument request) that can be used to wait or
test for completion. The completion of an MPI_Rget_accumulate
operation indicates that the data is available in the result buffer and
the origin buffer is free to be updated. It does not indicate that the
operation has been completed at the target window.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the
\fBTARGET_DISP\fP argument only for Fortran 90. FORTRAN 77 users may use
the non\-portable syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND TARGET_DISP
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
The generic functionality of MPI_Get_accumulate might limit the
performance of fetch\-and\-increment or fetch\-and\-add calls that might be
supported by special hardware operations. MPI_Fetch_and_op thus
allows for a fast implementation of a commonly used subset of the
functionality of MPI_Get_accumulate\&.
.sp
MPI_Get is a special case of MPI_Get_accumulate, with the
operation MPI_NO_OP. Note, however, that MPI_Get and
MPI_Get_accumulate have different constraints on concurrent updates.
.sp
It is the user\(aqs responsibility to guarantee that, when using the
accumulate functions, the target displacement argument is such that
accesses to the window are properly aligned according to the data type
arguments in the call to the MPI_Get_accumulate function.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Put MPI_Accumulate MPI_Fetch_and_op MPI_Reduce
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
