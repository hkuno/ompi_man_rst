.\" Man page generated from reStructuredText.
.
.TH "MPI_GET_ELEMENTS" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Get_elements\fP, MPI_Get_elements_x \- Returns the number of basic
elements in a data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype,
    int *count)

int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype,
    MPI_Count *count)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_GET_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)
    INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE, COUNT, IERROR

MPI_GET_ELEMENTS_X(STATUS, DATATYPE, COUNT, IERROR)
    INTEGER STATUS(MPI_STATUS_SIZE), DATATYPE
        INTEGER(KIND=MPI_COUNT_KIND) COUNT
        INTEGER IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Get_elements(status, datatype, count, ierror)
    TYPE(MPI_Status), INTENT(IN) :: status
    TYPE(MPI_Datatype), INTENT(IN) :: datatype
    INTEGER, INTENT(OUT) :: count
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Get_elements_x(status, datatype, count, ierror)
    TYPE(MPI_Status), INTENT(IN) :: status
    TYPE(MPI_Datatype), INTENT(IN) :: datatype
    INTEGER(KIND = MPI_COUNT_KIND), INTENT(OUT) :: count
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
status : Return status of receive operation (status).
.IP \(bu 2
datatype : Datatype used by receive operation (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
IERROR : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Get_elements\fP and MPI_Get_elements_x behave different from
MPI_Get_count, which returns the number of "top\-level entries" received,
i.e., the number of "copies" of type datatype. MPI_Get_count may return
any integer value k, where 0 =< k =< count. If MPI_Get_count returns k,
then the number of basic elements received (and the value returned by
\fI\%MPI_Get_elements\fP and MPI_Get_elements_x) is n k, where n is the number
of basic elements in the type map of datatype. If the number of basic
elements received is not a multiple of n, that is, if the receive
operation has not received an integral number of datatype "copies," then
MPI_Get_count returns the value MPI_UNDEFINED. For both functions, if
the count parameter cannot express the value to be returned (e.g., if
the parameter is too small to hold the output value), it is set to
MPI_UNDEFINED.
.sp
Example: Usage of MPI_Get_count and MPI_Get_element:
.sp
fortran //... MPI_TYPE_CONTIGUOUS(2, MPI_REAL, Type2, ierr)
MPI_TYPE_COMMIT(Type2, ierr) // ... MPI_COMM_RANK(comm, rank, ierr)
IF(rank.EQ.0) THEN CALL MPI_SEND(a, 2, MPI_REAL, 1, 0, comm, ierr) CALL
MPI_SEND(a, 3, MPI_REAL, 1, 0, comm, ierr) ELSE CALL MPI_RECV(a, 2,
Type2, 0, 0, comm, stat, ierr) CALL MPI_GET_COUNT(stat, Type2, i, ierr)
! returns i=1 CALL MPI_GET_ELEMENTS(stat, Type2, i, ierr) ! returns i=2
CALL MPI_RECV(a, 2, Type2, 0, 0, comm, stat, ierr) CALL
MPI_GET_COUNT(stat, Type2, i, ierr) ! returns i=MPI_UNDEFINED
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CALL MPI_GET_ELEMENTS(stat, Type2, i, ierr)  ! returns i=3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
END IF
.sp
The function \fI\%MPI_Get_elements\fP can also be used after a probe to find the
number of elements in the probed message. Note that the two functions
MPI_Get_count and \fI\%MPI_Get_elements\fP return the same values when they are
used with primitive data types.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the COUNT
argument of MPI_Get_elements_x only for Fortran 90. FORTRAN 77 users may
use the non\-portable syntax
.sp
Fortran INTEGERMPI_COUNT_KIND COUNT
.sp
where MPI_COUNT_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Get_count
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
