.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_GET_TRUE_EXTENT_X" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH MPI_TYPE_GET_TRUE_EXTENT
.sp
\fI\%MPI_Type_get_true_extent\fP, MPI_Type_get_true_extent_x \- Returns
the true lower bound and extent of a data type\(aqs corresponding typemap,
ignoring MPI_UB and MPI_LB markers.
.SS SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_get_true_extent(MPI_Datatype datatype,
     MPI_Aint *true_lb, MPI_Aint *true_extent)
int MPI_Type_get_true_extent_x(MPI_Datatype datatype,
     MPI_Count *true_lb, MPI_Count *true_extent)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_GET_TRUE_EXTENT(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR)
     INTEGER DATATYPE, IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) TRUE_LB, TRUE_EXTENT
MPI_TYPE_GET_TRUE_EXTENT_X(DATATYPE, TRUE_LB, TRUE_EXTENT, IERROR)
     INTEGER DATATYPE, IERROR
     INTEGER(KIND=MPI_COUNT_KIND) TRUE_LB, TRUE_EXTENT
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_get_true_extent(datatype, true_lb, true_extent, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: true_lb, true_extent
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
MPI_Type_get_true_extent_x(datatype, true_lb, true_extent, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER(KIND = MPI_COUNT_KIND), INTENT(OUT) :: true_lb, true_extent
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SS INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Data type for which information is wanted (handle).
.UNINDENT
.SS OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBtrue_lb\fP: True lower bound of data type (integer).
.IP \(bu 2
\fBtrue_extent\fP: True size of data type (integer).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SS DESCRIPTION
.sp
The \fItrue_lb\fP parameter returns the offset of the lowest unit of store
that is addressed by the data type, that is, the lower bound of the
corresponding typemap, ignoring MPI_LB markers. The \fItrue_extent\fP
parameter returns the true size of the data type, that is, the extent of
the corresponding typemap, ignoring MPI_LB and MPI_UB markers, and
performing no rounding for alignment. For both functions, if either the
\fItrue_lb\fP or \fItrue_extent\fP parameter cannot express the value to be
returned (e.g., if the parameter is too small to hold the output value),
it is set to MPI_UNDEFINED.
.sp
The \fItrue_extent\fP is the minimum number of bytes of memory necessary to
hold a data type, uncompressed.
.sp
See ยง 4.1.8 of the MPI\-3 standard for more detailed definitions of these
parameters in relation to the typemap.
.SS FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the \fITRUE_LB\fP
and \fITRUE_EXTENT\fP arguments only for Fortran 90. FORTRAN 77 users may
use the non\-portable syntax
.sp
\fI\%MPI_Type_get_true_extent\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
     INTEGER*MPI_ADDRESS_KIND TRUE_LB
or
     INTEGER*MPI_ADDRESS_KIND TRUE_EXTENT
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
MPI_Type_get_true_extent_x:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
     INTEGER*MPI_COUNT_KIND TRUE_LB
or
     INTEGER*MPI_COUNT_KIND TRUE_EXTENT
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND and MPI_COUNT_KIND are constants defined in
mpif.h and give the length of the declared integer in bytes.
.SS ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
