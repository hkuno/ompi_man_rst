.\" Man page generated from reStructuredText.
.
.TH "MPI_LOOKUP_NAME" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Lookup_name \- Finds port associated with a service name
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Lookup_name(const char *service_name, MPI_Info info,
     char *port_name)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_LOOKUP_NAME(SERVICE_NAME, INFO, PORT_NAME, IERROR)
     CHARACTER*(*)   SERVICE_NAME, PORT_NAME
     INTEGER         INFO, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Lookup_name(service_name, info, port_name, ierror)
     CHARACTER(LEN=*), INTENT(IN) :: service_name
     TYPE(MPI_Info), INTENT(IN) :: info
     CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBservice_name\fP: A service name (string).
.IP \(bu 2
\fBinfo\fP: Options to the name service functions (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBport_name\fP: a port name (string).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function retrieves a \fIport_name\fP published under \fIservice_name\fP by
a previous invocation of MPI_Publish_name\&. The application must supply a
\fIport_name\fP buffer large enough to hold the largest possible port name
(i.e., MPI_MAX_PORT_NAME bytes).
.SH INFO ARGUMENTS
.sp
The following keys for \fIinfo\fP are recognized:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Key                   Type      Description
\-\-\-                   \-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-

ompi_lookup_order     char *    Resolution order for name lookup.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fIompi_lookup_order\fP info key can specify one of four valid string
values (see the NAME SCOPE section below for more information on name
scopes):
.sp
\fIlocal\fP: Only search the local scope for name resolution.
.sp
\fIglobal\fP: Only search the global scope for name resolution.
.INDENT 0.0
.TP
.B \fIlocal,global\fP: Search the local scope for name resolution. If
not found, try searching the global scope for name resolution. This
behavior is the default if the \fIompi_lookup_order\fP info key is not
specified.
.TP
.B \fIglobal,local\fP: Search the global scope for name resolution. If
not found, try searching the local scope for name resolution.
.UNINDENT
.sp
If no info key is provided, the search will first check to see if a
global server has been specified and is available. If so, then the
search will default to global scope first, followed by local. Otherwise,
the search will default to local.
.SH NAME SCOPE
.sp
Open MPI supports two name scopes: \fIglobal\fP and \fIlocal\fP\&. Local scope
values are placed in a data store located on the mpirun of the calling
process\(aq job, while global scope values reside on a central server.
Calls to MPI_Unpublish_name must correctly specify the scope to be used
in finding the value to be removed. The function will return an error if
the specified service name is not found on the indicated location.
.sp
For a more detailed description of scoping rules, please see the
MPI_Publish_name man page.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
See the MPI man page for a full list of MPI error codes.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Publish_name    MPI_Open_port
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
