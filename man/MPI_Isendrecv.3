.\" Man page generated from reStructuredText.
.
.TH "MPI_ISENDRECV" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Isendrecv\fP \- Sends and receives a message.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Isendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     int dest, int sendtag, void *recvbuf, int recvcount,
     MPI_Datatype recvtype, int source, int recvtag,
     MPI_Comm comm, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_ISENDRECV(SENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG,
             RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM,
             REQUEST, IERROR)
     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, DEST, SENDTAG
     INTEGER RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM
     INTEGER REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Isendrecv(sendbuf, sendcount, sendtype, dest, sendtag, recvbuf,
             recvcount, recvtype, source, recvtag, comm, request, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
     TYPE(*), DIMENSION(..) :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, dest, sendtag, recvcount, source,
     recvtag
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Request) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP: Initial address of send buffer (choice).
.IP \(bu 2
\fBsendcount\fP: Number of elements to send (integer).
.IP \(bu 2
\fBsendtype\fP: Type of elements in send buffer (handle).
.IP \(bu 2
\fBdest\fP: Rank of destination (integer).
.IP \(bu 2
\fBsendtag\fP: Send tag (integer).
.IP \(bu 2
\fBrecvcount\fP: Maximum number of elements to receive (integer).
.IP \(bu 2
\fBrecvtype\fP: Type of elements in receive buffer (handle).
.IP \(bu 2
\fBsource\fP: Rank of source (integer).
.IP \(bu 2
\fBrecvtag\fP: Receive tag (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP: Initial address of receive buffer (choice).
.IP \(bu 2
\fBrequest\fP: Communication request (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The non\-blocking send\-receive operations combine in one call the sending
of a message to one destination and the receiving of another message,
from another process. The two (source and destination) are possibly the
same. This operation is useful for executing a shift operation across a
chain of processes. The send\-receive operation can be used in
conjunction with the functions described in the "Process Topologies"
chapter of the MPI Standard in order to perform shifts on various
logical topologies.
.sp
A message sent by a send\-receive operation can be received by a regular
receive operation or probed by a probe operation; a send\-receive
operation can receive a message sent by a regular send operation.
.sp
\fI\%MPI_Isendrecv\fP executes a non\-blocking send and receive operation. Both
send and receive use the same communicator, but possibly different tags.
The send buffer and receive buffers must be disjoint, and may have
different lengths and datatypes.
.sp
A non\-blocking send\-receive request can be determined to be completed by
calling the MPI_Wait, MPI_Waitany, MPI_Test, or MPI_Testany with the
request returned by this function.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Isendrecv_replace MPI_Sendrecv MPI_Sendrecv_replace
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
