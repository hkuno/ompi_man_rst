.\" Man page generated from reStructuredText.
.
.TH "MPI_SENDRECV_REPLACE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Sendrecv_replace\fP \- Sends and receives a message using a single
buffer.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype,
     int dest, int sendtag, int source, int recvtag, MPI_Comm comm,
     MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_SENDRECV_REPLACE(BUF, COUNT, DATATYPE, DEST, SENDTAG, SOURCE,
             RECVTAG, COMM, STATUS, IERROR)
     <type>  BUF(*)
     INTEGER COUNT, DATATYPE, DEST, SENDTAG
     INTEGER SOURCE, RECVTAG, COMM
     INTEGER STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Sendrecv_replace(buf, count, datatype, dest, sendtag, source, recvtag,
             comm, status, ierror)
     TYPE(*), DIMENSION(..) :: buf
     INTEGER, INTENT(IN) :: count, dest, sendtag, source, recvtag
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT/OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBbuf\fP: Initial address of send and receive buffer (choice).
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of elements in send and receive buffer (integer).
.IP \(bu 2
\fBdatatype\fP: Type of elements to send and receive (handle).
.IP \(bu 2
\fBdest\fP: Rank of destination (integer).
.IP \(bu 2
\fBsendtag\fP: Send message tag (integer).
.IP \(bu 2
\fBsource\fP: Rank of source (integer).
.IP \(bu 2
\fBrecvtag\fP: Receive message tag (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The send\-receive operations combine in one call the sending of a message
to one destination and the receiving of another message, from another
process. The two (source and destination) are possibly the same. A
send\-receive operation is useful for executing a shift operation across
a chain of processes. If blocking sends and receives are used for such a
shift, then one needs to order the sends and receives correctly (for
example, even processes send, then receive; odd processes receive first,
then send) in order to prevent cyclic dependencies that may lead to
deadlock. When a send\-receive operation is used, the communication
subsystem takes care of these issues. The send\-receive operation can be
used in conjunction with the functions described in Chapter 6 of the MPI
Standard, "Process Topologies," in order to perform shifts on various
logical topologies. Also, a send\-receive operation is useful for
implementing remote procedure calls.
.sp
A message sent by a send\-receive operation can be received by a regular
receive operation or probed by a probe operation; a send\-receive
operation can receive a message sent by a regular send operation.
.sp
\fI\%MPI_Sendrecv_replace\fP executes a blocking send and receive. The same
buffer is used both for the send and for the receive, so that the
message sent is replaced by the message received.
.sp
The semantics of a send\-receive operation is what would be obtained if
the caller forked two concurrent threads, one to execute the send, and
one to execute the receive, followed by a join of these two threads.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Sendrecv
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
