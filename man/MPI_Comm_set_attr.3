.\" Man page generated from reStructuredText.
.
.TH "MPI_COMM_SET_ATTR" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Comm_set_attr\fP \- Stores attribute value associated with a key.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_COMM_SET_ATTR(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, IERROR)
     INTEGER COMM, COMM_KEYVAL, IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Comm_set_attr(comm, comm_keyval, attribute_val, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, INTENT(IN) :: comm_keyval
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT/OUTPUT PARAMETER
\-\-\-\-\-/\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator from which attribute will be attached (handle).
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBcomm_keyval\fP: Key value (integer).
.IP \(bu 2
\fBattribute_val\fP: Attribute value.
.UNINDENT
.sp
OUTPUT PARAMETER
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Comm_set_attr\fP stores the stipulated attribute value \fIattribute_val\fP
for subsequent retrieval by MPI_Comm_get_attr\&. If the value is already
present, then the outcome is as if MPI_Comm_delete_attr was first called
to delete the previous value (and the callback function delete_fn was
executed), and a new value was next stored. The call is erroneous if
there is no key with value \fIcomm_keyval\fP; in particular
MPI_KEYVAL_INVALID is an erroneous key value. The call will fail if the
delete_fn function returned an error code other than MPI_SUCCESS.
.sp
This function replaces MPI_Attr_put, the use of which is deprecated. The
C binding is identical. The Fortran binding differs in that
\fIattribute_val\fP is an address\-sized integer.
.sp
FORTRAN 77 NOTES
\-\-\-\-\-\-\- \-\- \-\-\-\-\-
.sp
The MPI standard prescribes portable Fortran syntax for the
\fIATTRIBUTE_VAL\fP argument only for Fortran 90. Sun FORTRAN 77 users may
use the non\-portable syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND ATTRIBUTE_VAL
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
Values of the permanent attributes MPI_TAG_UB, MPI_HOST, MPI_IO, and
MPI_WTIME_IS_GLOBAL may not be changed.
.sp
The type of the attribute value depends on whether C or Fortran is being
used. In C, an attribute value is a pointer (void *); in Fortran, it is
a single, address\-size integer system for which a pointer does not fit
in an integer.
.sp
If an attribute is already present, the delete function (specified when
the corresponding keyval was created) will be called.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
