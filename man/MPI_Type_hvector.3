.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_HVECTOR" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_hvector\fP \- Creates a vector (strided) datatype with offset
in bytes \-\- use of this routine is deprecated.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride,
     MPI_Datatype oldtype, MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INCLUDE \(aqmpif.h\(aq
MPI_TYPE_HVECTOR(COUNT, BLOCKLENGTH, STRIDE, OLDTYPE, NEWTYPE,
             IERROR)
     INTEGER COUNT, BLOCKLENGTH, STRIDE, OLDTYPE
     INTEGER NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of blocks (nonnegative integer).
.IP \(bu 2
\fBblocklength\fP: Number of elements in each block (nonnegative integer).
.IP \(bu 2
\fBstride\fP: Number of bytes between start of each block (integer).
.IP \(bu 2
\fBoldtype\fP: Old datatype (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New datatype (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Note that use of this routine is \fIdeprecated\fP as of MPI\-2. Use
MPI_Type_create_hvector instead.
.sp
The function \fI\%MPI_Type_hvector\fP is identical to MPI_Type_vector, except
that stride is given in bytes, rather than in elements. The use for both
types of vector constructors is illustrated in the examples in Section
3.12.7 of the MPI\-1 Standard.
.sp
Assume that oldtype has type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ..., (type(n\-1), disp(n\-1))}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
with extent ex. Let bl be the blocklength. The newly created datatype
has a type map with count * bl * n entries:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ..., (type(n\-1), disp(n\-1)),
(type(0), disp(0) + ex), ..., (type(n\-1), disp(n\-1) + ex),
\&..., (type(0), disp(0) + (bl \-1) * ex),...,(type(n\-1),
disp(n\-1) + (bl \-1) * ex), (type(0), disp(0) + stride),
\&...,(type(n\-1), disp(n\-1) + stride), ..., (type(0),
disp(0) + stride + (bl \- 1) * ex), ..., (type(n\-1),
disp(n\-1) + stride + (bl \-1) * ex), ..., (type(0),
disp(0) + stride * (count \-1)), ...,(type(n\-1),
disp(n\-1) + stride * (count \-1)), ..., (type(0),
disp(0) + stride * (count \-1) + (bl \-1) * ex), ...,
(type(n\-1), disp(n\-1) + stride * (count \-1) + (bl \-1) * ex)}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Type_create_hvector | MPI_Type_vector
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
