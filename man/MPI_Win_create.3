.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_CREATE" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_create\fP \- One\-sided MPI call that returns a window object for
RMA operations.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

MPI_Win_create(void *base, MPI_Aint size, int disp_unit,
     MPI_Info info, MPI_Comm comm, MPI_Win *win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_CREATE(BASE, SIZE, DISP_UNIT, INFO, COMM, WIN, IERROR)
     <type> BASE(*)
     INTEGER(KIND=MPI_ADDRESS_KIND) SIZE
     INTEGER DISP_UNIT, INFO, COMM, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_create(base, size, disp_unit, info, comm, win, ierror)
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size
     INTEGER, INTENT(IN) :: disp_unit
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Win), INTENT(OUT) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBbase\fP: Initial address of window (choice).
.IP \(bu 2
\fBsize\fP: Size of window in bytes (nonnegative integer).
.IP \(bu 2
\fBdisp_unit\fP: Local unit size for displacements, in bytes (positive integer).
.IP \(bu 2
\fBinfo\fP: Info argument (handle).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBwin\fP: Window object returned by the call (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_create\fP is a one\-sided MPI communication collective call executed
by all processes in the group of \fIcomm\fP\&. It returns a window object that
can be used by these processes to perform RMA operations. Each process
specifies a window of existing memory that it exposes to RMA accesses by
the processes in the group of \fIcomm\fP\&. The window consists of \fIsize\fP
bytes, starting at address \fIbase\fP\&. A process may elect to expose no
memory by specifying \fIsize\fP = 0.
.sp
If the \fIbase\fP value used by \fI\%MPI_Win_create\fP was allocated by
MPI_Alloc_mem, the size of the window can be no larger than the value
set by the MPI_ALLOC_MEM function.
.sp
The displacement unit argument is provided to facilitate address
arithmetic in RMA operations: the target displacement argument of an RMA
operation is scaled by the factor \fIdisp_unit\fP specified by the target
process, at window creation.
.sp
The following info keys are supported:
.INDENT 0.0
.TP
.B no_locks
If set to \fItrue\fP, then the implementation may assume that the local
window is never locked (by a call to MPI_Win_lock or
MPI_Win_lock_all). Setting this value if only active synchronization
may allow the implementation to enable certain optimizations.
.TP
.B accumulate_ordering
By default, accumulate operations from one initiator to one target on
the same window memory location are strictly ordered. If the info key
accumulate_ordering is set to \fInone\fP, no ordering of accumulate
operations guaranteed. They key can also be a comma\-separated list of
required orderings consisting of \fIrar\fP, \fIwar\fP, \fIraw\fP, and \fIwaw\fP for
read\-after\-read, write\-after\-read, read\-after\-write, and
write\-after\-write, respectively. Looser ordering constraints are
likely to result in improved performance.
.TP
.B accumulate_ops
If set to \fIsame_op\fP, the implementation will assume that all
concurrent accumulate calls to the same target address will use the
same operation. If set to \fIsame_op_no_op\fP, then the implementation
will assume that all concurrent accumulate calls to the same target
address will use the same operation or MPI_NO_OP. The default is
\fIsame_op_no_op\fP\&.
.TP
.B same_size
If set to \fItrue\fP, then the implementation may assume that the
argument \fIsize\fP is identical on all processes, and that all processes
have provided this info key with the same value.
.TP
.B same_disp_unit
If set to \fItrue\fP, then the implementation may assume that the
argument \fIdisp_unit\fP is identical on all processes, and that all
processes have provided this info key with the same value.
.UNINDENT
.SH NOTES
.sp
Common choices for \fIdisp_unit\fP are 1 (no scaling), and (in C syntax)
\fIsizeof(type)\fP, for a window that consists of an array of elements of
type \fItype\fP\&. The later choice will allow one to use array indices in RMA
calls, and have those scaled correctly to byte displacements, even in a
heterogeneous environment.
.sp
Use memory allocated by MPI_Alloc_mem to guarantee properly aligned
window boundaries (such as word, double\-word, cache line, page frame,
and so on).
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the \fISIZE\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Alloc_mem MPI_Free_mem MPI_Win_allocate MPI_Win_allocate_shared
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
