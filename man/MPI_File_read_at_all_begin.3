.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_READ_AT_ALL_BEGIN" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_read_at_all_begin\fP \- Reads a file at explicitly specified
offsets; beginning part of a split collective routine (nonblocking).
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset
     offset, void *buf, int count, MPI_Datatype
     datatype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_READ_AT_ALL_BEGIN(FH, OFFSET, BUF,
     COUNT, DATATYPE, IERROR)
     <type>  BUF(*)
     INTEGER FH, COUNT, DATATYPE, IERROR
     INTEGER(KIND=MPI_OFFSET_KIND)   OFFSET
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_read_at_all_begin(fh, offset, buf, count, datatype, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf
     INTEGER, INTENT(IN) :: count
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: File handle (handle).
.IP \(bu 2
\fBoffset\fP: File offset (integer).
.IP \(bu 2
\fBcount\fP: Number of elements in buffer (integer).
.IP \(bu 2
\fBdatatype\fP: Data type of each buffer element.
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBbuf\fP: Initial address of buffer (choice).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_read_at_all_begin\fP is the beginning part of a split collective
routine that attempts to read from the file associated with \fIfh\fP (at the
\fIoffset\fP position) a total number of \fIcount\fP data items having
\fIdatatype\fP type into the user\(aqs buffer \fIbuf.\fP The \fIoffset\fP is in etype
units relative to the current view. That is, holes are not counted when
locating an offset. The data is taken out of those parts of the file
specified by the current view.
.sp
FORTRAN 77 NOTES
\-\-\-\-\-\-\- \-\- \-\-\-\-\-
.sp
The MPI standard prescribes portable Fortran syntax for the \fIOFFSET\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_OFFSET_KIND OFFSET
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
All the nonblocking collective routines for data access are "split" into
two routines, each with _begin or _end as a suffix. These split
collective routines are subject to the semantic rules described in
Section 9.4.5 of the MPI\-2 standard.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
