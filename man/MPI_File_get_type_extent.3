.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_GET_TYPE_EXTENT" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_get_type_extent\fP \- Returns the extent of the data type in a
file.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype
     datatype, MPI_Aint *extent)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_GET_TYPE_EXTENT(FH, DATATYPE, EXTENT, IERROR)
     INTEGER FH, DATATYPE, IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND)  EXTENT
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_get_type_extent(fh, datatype, extent, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: extent
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: File handle (handle).
.IP \(bu 2
\fBdatatype\fP: Data type (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBextent\fP: Data type extent (integer).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_get_type_extent\fP can be used to calculate \fIextent\fP for
\fIdatatype\fP in the file. The extent is the same for all processes
accessing the file associated with \fIfh\fP\&. If the current view uses a
user\-defined data representation, \fI\%MPI_File_get_type_extent\fP uses the
\fIdtype_file_extent_fn\fP callback to calculate the extent.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the \fIEXTENT\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND EXTENT
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
If the file data representation is other than "native," care must be
taken in constructing etypes and file types. Any of the data\-type
constructor functions may be used; however, for those functions that
accept displacements in bytes, the displacements must be specified in
terms of their values in the file for the file data representation being
used. MPI will interpret these byte displacements as is; no scaling will
be done. The function \fI\%MPI_File_get_type_extent\fP can be used to calculate
the extents of data types in the file. For etypes and file types that
are portable data types, MPI will scale any displacements in the data
types to match the file data representation. Data types passed as
arguments to read/write routines specify the data layout in memory;
therefore, they must always be constructed using displacements
corresponding to displacements in memory.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
