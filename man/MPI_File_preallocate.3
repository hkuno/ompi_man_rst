.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_PREALLOCATE" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_preallocate\fP \- Preallocates a specified amount of storage
space at the beginning of a file (collective).
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_File_preallocate(MPI_File fh, MPI_Offset size)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_PREALLOCATE(FH, SIZE, IERROR)
     INTEGER FH, IERROR
     INTEGER(KIND=MPI_OFFSET_KIND)   SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_preallocate(fh, size, ierror)
     TYPE(MPI_File), INTENT(IN) :: fh
     INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT/OUTPUT PARAMETER
\-\-\-\-\-/\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
* \fBfh\fP: File handle (handle).
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBsize\fP: Size to preallocate file, in bytes (integer).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_preallocate\fP ensures that storage space is allocated for the
first \fIsize\fP bytes of the file associated with \fIfh\fP\&.
\fI\%MPI_File_preallocate\fP can be a very time\-consuming operation.
.sp
\fI\%MPI_File_preallocate\fP is collective; all processes in the group must pass
identical values for \fIsize\fP\&. Regions of the file that have previously
been written are unaffected. For newly allocated regions of the file,
\fI\%MPI_File_preallocate\fP has the same effect as writing undefined data. If
size is larger than the current file size, the file size increases to
\fIsize\fP\&. If \fIsize\fP is less than or equal to the current file size, the
file size is unchanged.
.sp
The treatment of file pointers, pending nonblocking accesses, and file
consistency is the same as with MPI_File_set_size\&. If
MPI_MODE_SEQUENTIAL mode was specified when the file was opened, it is
erroneous to call this routine.
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the \fISIZE\fP
argument only for Fortran 90. FORTRAN 77 users may use the non\-portable
syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_OFFSET_KIND SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_OFFSET_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH NOTES
.sp
When using the collective routine MPI_File_set_size on a UNIX file, if
the size that is set is smaller than the current file size, the file is
truncated at the position defined by size. If the size is set to be
larger than the current file size, the file size becomes the set size.
When the file size is increased this way with MPI_File_set_size, new
regions are created in the file with displacements between the old file
size and the larger, newly set file size.
.sp
Sun MPI I/O does not necessarily allocate file space for such new
regions. You may reserve file space either by using \fI\%MPI_File_preallocate\fP
or by performing a read or write to certain bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
