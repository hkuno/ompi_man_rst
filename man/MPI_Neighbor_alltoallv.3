.\" Man page generated from reStructuredText.
.
.TH "MPI_NEIGHBOR_ALLTOALLV" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
MPI_Neighbor_alltoallv, MPI_Ineighbor_alltoallv,
MPI_Neighbor_alltoallv_init \- All processes send different amounts of
data to, and receive different amounts of data from, all neighbors
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[],
     const int sdispls[], MPI_Datatype sendtype,
     void *recvbuf, const int recvcounts[],
     const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm)

int MPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[],
     const int sdispls[], MPI_Datatype sendtype,
     void *recvbuf, const int recvcounts[],
     const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
     MPI_Request *request)

int MPI_Neighbor_alltoallv_init(const void *sendbuf, const int sendcounts[],
     const int sdispls[], MPI_Datatype sendtype,
     void *recvbuf, const int recvcounts[],
     const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm,
     MPI_Info info, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_NEIGHBOR_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE,
     RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE
     INTEGER RECVCOUNTS(*), RDISPLS(*), RECVTYPE
     INTEGER COMM, IERROR

MPI_INEIGHBOR_ALLTOALLV(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE,
     RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, REQUEST, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE
     INTEGER RECVCOUNTS(*), RDISPLS(*), RECVTYPE
     INTEGER COMM, REQUEST, IERROR

MPI_NEIGHBOR_ALLTOALLV_INIT(SENDBUF, SENDCOUNTS, SDISPLS, SENDTYPE,
     RECVBUF, RECVCOUNTS, RDISPLS, RECVTYPE, COMM, INFO, REQUEST, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNTS(*), SDISPLS(*), SENDTYPE
     INTEGER RECVCOUNTS(*), RDISPLS(*), RECVTYPE
     INTEGER COMM, INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Neighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf,
             recvcounts, rdispls, recvtype, comm, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
     TYPE(*), DIMENSION(..) :: recvbuf
     INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*),
     rdispls(*)
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Ineighbor_alltoallv(sendbuf, sendcounts, sdispls, sendtype, recvbuf,
             recvcounts, rdispls, recvtype, comm, request, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*),
     recvcounts(*), rdispls(*)
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Neighbor_alltoallv_init(sendbuf, sendcounts, sdispls, sendtype, recvbuf,
             recvcounts, rdispls, recvtype, comm, info, request, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*),
     recvcounts(*), rdispls(*)
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP: Starting address of send buffer.
.IP \(bu 2
\fBsendcounts\fP: Integer array, where entry i specifies the number of elements to send to neighbor i.
.IP \(bu 2
\fBsdispls\fP: Integer array, where entry i specifies the displacement (offset from \fIsendbuf\fP, in units of \fIsendtype\fP) from which to send data to neighbor i.
.IP \(bu 2
\fBsendtype\fP: Datatype of send buffer elements.
.IP \(bu 2
\fBrecvcounts\fP: Integer array, where entry j specifies the number of elements to receive from neighbor j.
.IP \(bu 2
\fBrdispls\fP: Integer array, where entry j specifies the displacement (offset from \fIrecvbuf\fP, in units of \fIrecvtype\fP) to which data from neighbor j should be written.
.IP \(bu 2
\fBrecvtype\fP: Datatype of receive buffer elements.
.IP \(bu 2
\fBcomm\fP: Communicator over which data is to be exchanged.
.IP \(bu 2
\fBinfo\fP: Info (handle, persistent only).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP: Address of receive buffer.
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status.
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Neighbor_alltoallv is a generalized collective operation in which
all processes send data to and receive data from all neighbors. It adds
flexibility to MPI_Neighbor_alltoall by allowing the user to specify
data to send and receive vector\-style (via a displacement and element
count). The operation of this routine can be thought of as follows,
where each process performs 2n (n being the number of neighbors in to
topology of communicator \fIcomm\fP) independent point\-to\-point
communications. The neighbors and buffer layout are determined by the
topology of \fIcomm\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Cart_get(comm, maxdims, dims, periods, coords);
for (dim = 0, i = 0 ; dim < dims ; ++dim) {
    MPI_Cart_shift(comm, dim, 1, &r0, &r1);
    MPI_Isend(sendbuf + sdispls[i]  * extent(sendtype),
              sendcount, sendtype, r0, ..., comm, ...);
    MPI_Irecv(recvbuf + rdispls[i] * extent(recvtype),
              recvcount, recvtype, r0, ..., comm, ...);
    ++i;
    MPI_Isend(sendbuf + sdispls[i] * extent(sendtype),
              sendcount, sendtype, r1, ..., comm, &req[i]);
    MPI_Irecv(recvbuf + rdispls[i] * extent(recvtype),
              recvcount, recvtype, r1, ..., comm, ...);
    ++i;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Process j sends the k\-th block of its local \fIsendbuf\fP to neighbor k,
which places the data in the j\-th block of its local \fIrecvbuf\fP\&.
.sp
When a pair of processes exchanges data, each may pass different element
count and datatype arguments so long as the sender specifies the same
amount of data to send (in bytes) as the receiver expects to receive.
.sp
Note that process i may send a different amount of data to process j
than it receives from process j. Also, a process may send entirely
different amounts of data to different processes in the communicator.
.SH NEIGHBOR ORDERING
.sp
For a distributed graph topology, created with MPI_Dist_graph_create,
the sequence of neighbors in the send and receive buffers at each
process is defined as the sequence returned by MPI_Dist_graph_neighbors
for destinations and sources, respectively. For a general graph
topology, created with MPI_Graph_create, the order of neighbors in the
send and receive buffers is defined as the sequence of neighbors as
returned by MPI_Graph_neighbors\&. Note that general graph topologies
should generally be replaced by the distributed graph topologies.
.sp
For a Cartesian topology, created with MPI_Cart_create, the sequence of
neighbors in the send and receive buffers at each process is defined by
order of the dimensions, first the neighbor in the negative direction
and then in the positive direction with displacement 1. The numbers of
sources and destinations in the communication routines are 2*ndims with
ndims defined in MPI_Cart_create\&. If a neighbor does not exist, i.e., at
the border of a Cartesian topology in the case of a non\-periodic virtual
grid dimension (i.e., periods[...]==false), then this neighbor is
defined to be MPI_PROC_NULL.
.sp
If a neighbor in any of the functions is MPI_PROC_NULL, then the
neighborhood collective communication behaves like a point\-to\-point
communication with MPI_PROC_NULL in this direction. That is, the buffer
is still part of the sequence of neighbors but it is neither
communicated nor updated.
.SH NOTES
.sp
The MPI_IN_PLACE option for \fIsendbuf\fP is not meaningful for this
operation.
.sp
The specification of counts and displacements should not cause any
location to be written more than once.
.sp
All arguments on all processes are significant. The \fIcomm\fP argument, in
particular, must describe the same communicator on all processes.
.sp
The offsets of \fIsdispls\fP and \fIrdispls\fP are measured in units of
\fIsendtype\fP and \fIrecvtype\fP, respectively. Compare this to
MPI_Neighbor_alltoallw, where these offsets are measured in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Neighbor_alltoall    MPI_Neighbor_alltoallw    MPI_Cart_create    MPI_Graph_create    MPI_Dist_graph_create
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
