.\" Man page generated from reStructuredText.
.
.TH "MPI_COMM_DELETE_ATTR" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Comm_delete_attr\fP \- Deletes attribute value associated with a
key.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_COMM_DELETE_ATTR(COMM, COMM_KEYVAL, IERROR)
    INTEGER COMM, COMM_KEYVAL, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Comm_delete_attr(comm, comm_keyval, ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, INTENT(IN) :: comm_keyval
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Input/Output Parameter
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP : Communicator from which the attribute is deleted (handle).
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBcomm_keyval\fP : Key value (integer).
.UNINDENT
.SH OUTPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Comm_delete_attr\fP deletes an attribute from cache by key. This
function invokes the attribute delete function \fBdelete_fn\fP specified
when the \fBcomm_keyval\fP was created. The call will fail if the
\fBdelete_fn\fP function returns an error code other than MPI_SUCCESS.\(ga\(ga
Whenever a communicator is replicated using the function
MPI_Comm_dup, all callback copy functions for attributes that are
currently set are invoked (in arbitrary order). Whenever a communicator
is deleted using the function MPI_Comm_free, all callback delete
functions for attributes that are currently set are invoked. This
function is the same as MPI_Attr_delete but is needed to match the
\fBcomm\fPunicator\-specific functions introduced in the MPI\-2 standard.
The use of MPI_Attr_delete is deprecated.
.SH NOTES
.sp
Note that it is not defined by the MPI standard what happens if the
\fBdelete_fn\fP callback invokes other MPI functions. In Open MPI, it is
not valid for \fBdelete_fn\fP callbacks (or any of their children) to add
or delete attributes on the same object on which the \fBdelete_fn\fP
callback is being invoked.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
