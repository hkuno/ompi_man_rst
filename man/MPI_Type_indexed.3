.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_INDEXED" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_indexed\fP, MPI_Type_create_hindexed \- Creates an indexed
datatype.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_indexed(int count, const int array_of_blocklengths[],
     const int array_of_displacements[], MPI_Datatype oldtype,
     MPI_Datatype *newtype)

int MPI_Type_create_hindexed(int count,
     const int array_of_blocklengths[],
     const MPI_Aint array_of_displacements[], MPI_Datatype oldtype,
     MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_INDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS,
             ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)
     INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*)
     INTEGER ARRAY_OF_DISPLACEMENTS(*), OLDTYPE, NEWTYPE
     INTEGER IERROR

MPI_TYPE_CREATE_HINDEXED(COUNT, ARRAY_OF_BLOCKLENGTHS,
             ARRAY_OF_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)
     INTEGER COUNT, ARRAY_OF_BLOCKLENGTHS(*)
     INTEGER OLDTYPE, NEWTYPE
     INTEGER(KIND=MPI_ADDRESS_KIND) ARRAY_OF_DISPLACEMENTS(*)
     INTEGER IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_indexed(count, array_of_blocklengths, array_of_displacements,
             oldtype, newtype, ierror)
     INTEGER, INTENT(IN) :: count, array_of_blocklengths(count),
     array_of_displacements(count)
     TYPE(MPI_Datatype), INTENT(IN) :: oldtype
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Type_create_hindexed(count, array_of_blocklengths,
             array_of_displacements, oldtype, newtype, ierror)
     INTEGER, INTENT(IN) :: count, array_of_blocklengths(count)
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) ::
     array_of_displacements(count)
     TYPE(MPI_Datatype), INTENT(IN) :: oldtype
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Number of blocks \-\- also number of entries in array_of_displacements and array_of_blocklengths (nonnegative integer).
.IP \(bu 2
\fBarray_of_blocklengths\fP: Number of elements per block (array of nonnegative integers).
.IP \(bu 2
\fBarray_of_displacements\fP: Displacement for each block, in multiples of oldtype extent for MPI_Type_indexed and bytes for MPI_Type_create_hindexed (array of integer for \fBMPI_TYPE_INDEXED\fP, array of \fIMPI_Aint\fP for \fBMPI_TYPE_CREATE_HINDEXED\fP).
.IP \(bu 2
\fBoldtype\fP: Old datatype (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New datatype (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The function \fI\%MPI_Type_indexed\fP allows replication of an old datatype into
a sequence of blocks (each block is a concatenation of the old
datatype), where each block can contain a different number of copies and
have a different displacement. All block displacements are multiples of
the old data type\(aqs extent.
.sp
\fBExample:\fP Let oldtype have type map {(double, 0), (char, 8)}, with
extent 16. Let B = (3, 1) and let D = (4, 0). A call to
MPI_Type_indexed(2, B, D, oldtype, newtype) returns a datatype with type
map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 64), (char, 72), (double, 80), (char, 88),
(double, 96), (char, 104),
(double, 0), (char, 8)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That is, three copies of the old type starting at displacement 4 x 16 =
64, and one copy starting at displacement 0.
.sp
In general, assume that oldtype has type map
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ..., (type(n\-1), disp(n\-1))},
.ft P
.fi
.UNINDENT
.UNINDENT
.nf
with extent ex. Let B be the array_of_blocklength argument and D be
the array_of_displacements argument. The newly created datatype has
.fi
.sp
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
n x S ^count\-1
    i = 0           B[i]  entries:

    {(type(0), disp(0) + D[0]* ex), ...,
    (type(n\-1), disp(n\-1) + D[0]* ex), ...,
    (type(0), disp(0) + (D[0] + B[0]\-1)* ex), ...,
    (type(n\-1), disp(n\-1) + (D[0]+ B[0]\-1)* ex), ...,
    (type(0), disp(0) + D[count\-1]* ex), ...,
    (type(n\-1), disp(n\-1) + D[count\-1]* ex), ...,
    (type(0), disp(0) +  (D[count\-1] + B[count\-1] \-1)* ex), ...,
    (type(n\-1), disp(n\-1) + (D[count\-1] + B[count\-1] \-1)* ex)}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
A call to MPI_Type_vector(count, blocklength, stride, oldtype, newtype)
is equivalent to a call to MPI_Type_indexed(count, B, D, oldtype,
newtype) where
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
    D[j] = j * stride, j = 0,..., count\-1

and

    B[j] = blocklength, j = 0, .., count\-1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The function MPI_Type_create_hindexed is identical to \fI\%MPI_Type_indexed\fP,
except that block displacements in \fIarray_of_displacements\fP are
specified in bytes, rather than in multiples of the \fIoldtype\fP extent.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Type_hindexed
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
