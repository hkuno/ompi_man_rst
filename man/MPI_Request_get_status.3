.\" Man page generated from reStructuredText.
.
.TH "MPI_REQUEST_GET_STATUS" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Request_get_status\fP \- Access information associated with a
request without freeing the request.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_REQUEST_GET_STATUS(REQUEST, FLAG, STATUS, IERROR)
     INTEGER REQUEST, STATUS(MPI_STATUS_SIZE), IERROR
     LOGICAL FLAG
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Request_get_status(request, flag, status, ierror)
     TYPE(MPI_Request), INTENT(IN) :: request
     LOGICAL, INTENT(OUT) :: flag
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETER
\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBrequest\fP: Communication request (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBflag\fP: Boolean flag, same as from MPI_Test (logical).
.IP \(bu 2
\fBstatus\fP: MPI_Status object if flag is true (status).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Request_get_status\fP sets \fIflag\fP=\fItrue\fP if the operation is
complete or sets \fIflag\fP=\fIfalse\fP if it is not complete. If the
operation is complete, it returns in \fIstatus\fP the request status. It
does not deallocate or inactivate the request; a subsequent call to
test, wait, or free should be executed with that request.
.sp
If your application does not need to examine the \fIstatus\fP field, you can
save resources by using the predefined constant MPI_STATUS_IGNORE as a
special value for the \fIstatus\fP argument.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
