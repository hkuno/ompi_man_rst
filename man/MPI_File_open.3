.\" Man page generated from reStructuredText.
.
.TH "MPI_FILE_OPEN" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_File_open\fP \- Opens a file (collective).
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_File_open(MPI_Comm comm, const char *filename,
     int amode, MPI_Info info,
     MPI_File *fh)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_FILE_OPEN(COMM, FILENAME, AMODE, INFO, FH, IERROR)
     CHARACTER*(*)   FILENAME
     INTEGER COMM, AMODE, INFO, FH, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_File_open(comm, filename, amode, info, fh, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm
     CHARACTER(LEN=*), INTENT(IN) :: filename
     INTEGER, INTENT(IN) :: amode
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_File), INTENT(OUT) :: fh
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.IP \(bu 2
\fBfilename\fP: Name of file to open (string).
.IP \(bu 2
\fBamode\fP: File access mode (integer).
.IP \(bu 2
\fBinfo\fP: Info object (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBfh\fP: New file handle (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_File_open\fP opens the file identified by the filename \fIfilename\fP on
all processes in the \fIcomm\fP communicator group. \fI\%MPI_File_open\fP is a
collective routine; all processes must provide the same value for
\fIamode,\fP and all processes must provide filenames that reference the
same file which are textually identical (note: Open MPI I/O plugins may
have restrictions on characters that can be used in filenames. For
example, the ROMIO plugin may disallow the colon (":") character from
appearing in a filename). A process can open a file independently of
other processes by using the MPI_COMM_SELF communicator. The file handle
returned, \fIfh,\fP can be subsequently used to access the file until the
file is closed using MPI_File_close\&. Before calling MPI_Finalize, the
user is required to close (via MPI_File_close) all files that were
opened with \fI\%MPI_File_open\fP\&. Note that the communicator \fIcomm\fP is
unaffected by \fI\%MPI_File_open\fP and continues to be usable in all MPI
routines. Furthermore, use of \fIcomm\fP will not interfere with I/O
behavior.
.sp
Initially, all processes view the file as a linear byte stream; that is,
the \fIetype\fP and \fIfiletype\fP are both MPI_BYTE. The file view can be
changed via the MPI_File_set_view routine.
.sp
The following access modes are supported (specified in amode, in a
bit\-vector OR in one of the following integer constants):
.INDENT 0.0
.INDENT 3.5
o    MPI_MODE_APPEND
.sp
o    MPI_MODE_CREATE \-\- Create the file if it does not exist.
.sp
o    MPI_MODE_DELETE_ON_CLOSE
.sp
o    MPI_MODE_EXCL \-\- Error creating a file that already exists.
.sp
o    MPI_MODE_RDONLY \-\- Read only.
.sp
o    MPI_MODE_RDWR \-\- Reading and writing.
.sp
o    MPI_MODE_SEQUENTIAL
.sp
o    MPI_MODE_WRONLY \-\- Write only.
.sp
o    MPI_MODE_UNIQUE_OPEN
.UNINDENT
.UNINDENT
.sp
The modes MPI_MODE_RDONLY, MPI_MODE_RDWR, MPI_MODE_WRONLY, and
MPI_MODE_CREATE have identical semantics to their POSIX counterparts. It
is erroneous to specify MPI_MODE_CREATE in conjunction with
MPI_MODE_RDONLY. Errors related to the access mode are raised in the
class MPI_ERR_AMODE.
.sp
On single\-node clusters, files are opened by default using nonatomic
mode file consistency semantics. The more stringent atomic\-mode
consistency semantics, required for atomicity of overlapping accesses,
are the default when processors in a communicator group reside on more
than one node. This setting can be changed using MPI_File_set_atomicity\&.
.sp
The \fI\%MPI_File_open\fP interface allows the user to pass information via the
\fIinfo\fP argument. It can be set to MPI_INFO_NULL. See the HINTS section
for a list of hints that can be set.
.SH HINTS
.sp
The following hints can be used as values for the \fIinfo\fP argument.
.sp
SETTABLE HINTS:
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
NOTE: A buffer size smaller than the distance (in bytes) in a UNIX file
between the first byte and the last byte of the access request causes
MPI I/O to iterate and perform multiple UNIX read() or write() calls. If
the request includes multiple noncontiguous chunks of data, and the
buffer size is greater than the size of those chunks, then the UNIX
read() or write() (made at the MPI I/O level) will access data not
requested by this process in order to reduce the total number of write()
calls made. If this is not desirable behavior, you should reduce this
buffer size to equal the size of the contiguous chunks within the
aggregate request.
.sp
{INDENT}{curline}
.sp
{INDENT}{curline}
.sp
NON\-SETTABLE HINTS:
.sp
{INDENT}{curline}
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. For MPI I/O function errors, the default error handler is set to
MPI_ERRORS_RETURN. The error handler may be changed with
MPI_File_set_errhandler; the predefined error handler
MPI_ERRORS_ARE_FATAL may be used to make I/O errors fatal. Note that MPI
does not guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
