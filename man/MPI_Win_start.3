.\" Man page generated from reStructuredText.
.
.TH "MPI_WIN_START" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Win_start\fP \- Starts an RMA access epoch for \fIwin\fP
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Win_start(MPI_Group group, int assert, MPI_Win win)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_WIN_START(GROUP, ASSERT, WIN, IERROR)
     INTEGER GROUP, ASSERT, WIN, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Win_start(group, assert, win, ierror)
     TYPE(MPI_Group), INTENT(IN) :: group
     INTEGER, INTENT(IN) :: assert
     TYPE(MPI_Win), INTENT(IN) :: win
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBgroup\fP: The group of target processes (handle).
.IP \(bu 2
\fBassert\fP: Program assertion (integer).
.IP \(bu 2
\fBwin\fP: Window object (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Win_start\fP is a one\-sided MPI communication synchronization call that
starts an RMA access epoch for \fIwin\fP\&. RMA calls issued on \fIwin\fP during
this epoch must access only windows at processes in \fIgroup\fP\&. Each
process in \fIgroup\fP must issue a matching call to MPI_Win_post\&.
\fI\%MPI_Win_start\fP is allowed to block until the corresponding MPI_Win_post
calls have been executed, but is not required to.
.sp
The \fIassert\fP argument is used to provide assertions on the context of
the call that may be used for various optimizations. (See Section 6.4.4
of the MPI\-2 Standard.) A value of \fIassert\fP = 0 is always valid. The
following assertion value is supported:
.INDENT 0.0
.TP
.B MPI_MODE_NOCHECK
When this value is passed in to this call, the library assumes that
the post call on the target has been called and it is not necessary
for the library to check to see if such a call has been made.
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Win_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Win_post MPI_Win_complete
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
