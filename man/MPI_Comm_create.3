.\" Man page generated from reStructuredText.
.
.TH "MPI_COMM_CREATE" "3" "Jan 11, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Comm_create\fP \- Creates a new communicator.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq

MPI_COMM_CREATE(COMM, GROUP, NEWCOMM, IERROR)
    INTEGER COMM, GROUP, NEWCOMM, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08

MPI_Comm_create(comm, group, newcomm, ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm
    TYPE(MPI_Group), INTENT(IN) :: group
    TYPE(MPI_Comm), INTENT(OUT) :: newcomm
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETER
.INDENT 0.0
.IP \(bu 2
\fBcomm\fP : Communicator (handle).
.IP \(bu 2
\fBgroup\fP : Group, which is a subset of the group of comm (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewcomm\fP : New communicator (handle).
.IP \(bu 2
\fBIERROR\fP : Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
This function creates a new communicator \fBnewcomm\fP with communication
\fBgroup\fP defined by \fBgroup\fP and a new context. The function sets
\fBnewcomm\fP to a new communicator that spans all the processes that are
in the \fBgroup\fP\&. It sets \fBnewcomm\fP to MPI_COMM_NULL for processes
that are not in the \fBgroup\fP\&. Each process must call with a \fBgroup\fP
argument that is a subgroup of the \fBgroup\fP associated with \fBcomm\fP;
this could be MPI_GROUP_EMPTY. The processes may specify different
values for the \fBgroup\fP argument. If a process calls with a non\-empty
\fBgroup\fP, then all processes in that \fBgroup\fP must call the function
with the same \fBgroup\fP as argument, that is: the same processes in the
same order. Otherwise the call is erroneous.
.SH NOTES
.sp
\fI\%MPI_Comm_create\fP provides a means of making a subset of processes for
the purpose of separate MIMD computation, with separate communication
space. \fBnewcomm\fP, which is created by \fI\%MPI_Comm_create\fP, can be used
in subsequent calls to \fI\%MPI_Comm_create\fP (or other communicator
constructors) to further subdivide a computation into parallel
sub\-computations. A more general service is provided by
MPI_Comm_split\&.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument. Before the
error value is returned, the current MPI error handler is called. By
default, this error handler aborts the MPI job, except for I/O function
errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler
MPI_ERRORS_RETURN may be used to cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Comm_split MPI_Intercomm_create MPI_Comm_create_group
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
