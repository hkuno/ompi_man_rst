.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CONTIGUOUS" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_contiguous\fP \- Creates a contiguous datatype.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_contiguous(int count, MPI_Datatype oldtype,
     MPI_Datatype *newtype)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CONTIGUOUS(COUNT, OLDTYPE, NEWTYPE, IERROR)
     INTEGER COUNT, OLDTYPE, NEWTYPE, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_contiguous(count, oldtype, newtype, ierror)
     INTEGER, INTENT(IN) :: count
     TYPE(MPI_Datatype), INTENT(IN) :: oldtype
     TYPE(MPI_Datatype), INTENT(OUT) :: newtype
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcount\fP: Replication count (nonnegative integer).
.IP \(bu 2
\fBoldtype\fP: Old datatype (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBnewtype\fP: New datatype (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The simplest datatype constructor is \fI\%MPI_Type_contiguous\fP, which allows
replication of a datatype into contiguous locations.
.sp
\fInewtype\fP is the datatype obtained by concatenating \fIcount\fP copies of
\fIoldtype\fP\&. Concatenation is defined using the extent of \fIoldtype\fP as the
size of the concatenated copies.
.sp
\fBExample:\fP Let oldtype have type map {(double, 0), (char, 8)}, with
extent 16, and let count = 3. The type map of the datatype returned by
newtype is
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(double, 0), (char, 8), (double, 16), (char, 24),
(double, 32), (char, 40)];
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
i.e., alternating double and char elements, with displacements 0, 8, 16,
24, 32, 40.
.sp
In general, assume that the type map of oldtype is
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)),...,(type(n\-1), disp(n\-1))},
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
with extent ex. Then newtype has a type map with count times n entries
defined by:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
{(type(0), disp(0)), ...,(type(n\-1), disp(n\-1)),
(type(0), disp(0) + ex), ...,(type(n\-1),
disp(n\-1) + ex), ...,(type(0), disp(0) + ex * (count \- 1)),
\&...,(type(n\-1), disp(n\-1) + ex * (count \- 1))}.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more information about derived datatypes, see Section 3.12 of the
MPI\-1 Standard.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
