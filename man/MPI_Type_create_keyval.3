.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_CREATE_KEYVAL" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_create_keyval\fP \- Generates a new attribute key for caching
on data types.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn,
     MPI_Type_delete_attr_function *type_delete_attr_fn,
     int *type_keyval, void *extra_state)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax (see FORTRAN 77 NOTES)
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_CREATE_KEYVAL(TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN,
             TYPE_KEYVAL, EXTRA_STATE, IERROR)
     EXTERNAL TYPE_COPY_ATTR_FN, TYPE_DELETE_ATTR_FN
     INTEGER TYPE_KEYVAL, IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_create_keyval(type_copy_attr_fn, type_delete_attr_fn, type_keyval,
             extra_state, ierror)
     PROCEDURE(MPI_Type_copy_attr_function) :: type_copy_attr_fn
     PROCEDURE(MPI_Type_delete_attr_function) :: type_delete_attr_fn
     INTEGER, INTENT(OUT) :: type_keyval
     INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBtype_copy_attr_fn\fP: Copy callback function for \fItype_keyval\fP (function).
.IP \(bu 2
\fBtype_delete_attr_fn\fP: Delete callback function for \fItype_keyval\fP (function).
.IP \(bu 2
\fBextra_state\fP: Extra state for callback functions.
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBtype_keyval\fP: Key value for future access (integer).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Type_create_keyval\fP generates a new attribute key for caching on data
types. This routine partially replaces MPI_Keyval_create\&.
.sp
The argument \fItype_copy_attr_fn\fP may be specified as
MPI_TYPE_NULL_COPY_FN or MPI_TYPE_DUP_FN from C or Fortran.
MPI_TYPE_NULL_COPY_FN is a function that does nothing other than
returning \fIflag\fP = 0 and MPI_SUCCESS. MPI_TYPE_DUP_FN is a simple\-minded
copy function that sets \fIflag\fP = 1, returns the value of
\fIattribute_val_in\fP in \fIattribute_val_out\fP, and returns MPI_SUCCESS.
.sp
The argument \fItype_delete_attr_fn\fP may be specified as
MPI_TYPE_NULL_DELETE_FN from C or Fortran. MPI_TYPE_NULL_DELETE_FN is a
function that does nothing beyond returning MPI_SUCCESS. The C callback
functions are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
typedef int MPI_Type_copy_attr_function(MPI_Datatype oldtype,
            int type_keyval, void *extra_state, void *attribute_val_in,
            void *attribute_val_out, int *flag);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
typedef int MPI_Type_delete_attr_function(MPI_Datatype type, int type_keyval,
             void *attribute_val, void *extra_state);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The Fortran callback functions are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SUBROUTINE TYPE_COPY_ATTR_FN(OLDTYPE, TYPE_KEYVAL, EXTRA_STATE,
             ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)
    INTEGER OLDTYPE, TYPE KEYVAL, IERROR
    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE,
        ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT
    LOGICAL FLAG
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
SUBROUTINE TYPE_DELETE_ATTR_FN(TYPE, TYPE_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE,
             IERROR)
    INTEGER TYPE, TYPE_KEYVAL, IERROR
    INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE VAL, EXTRA_STATE
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FORTRAN 77 NOTES
.sp
The MPI standard prescribes portable Fortran syntax for the
\fIEXTRA_STATE\fP argument only for Fortran 90. FORTRAN 77 users may use the
non\-portable syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_ADDRESS_KIND EXTRA_STATE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_ADDRESS_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Type_free_keyval
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
