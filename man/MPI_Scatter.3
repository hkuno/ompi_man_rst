.\" Man page generated from reStructuredText.
.
.TH "MPI_SCATTER" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
MPI_Scatter, MPI_Iscatter, MPI_Scatter_init \- Sends data from one
task to all tasks in a group.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
     MPI_Comm comm)

int MPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
     MPI_Comm comm, MPI_Request *request)

int MPI_Scatter_init(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
     void *recvbuf, int recvcount, MPI_Datatype recvtype, int root,
     MPI_Comm comm, MPI_Info info, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_SCATTER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, ROOT, COMM, IERROR)
     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
     INTEGER COMM, IERROR

MPI_ISCATTER(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, ROOT, COMM, REQUEST, IERROR)
     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
     INTEGER COMM, REQUEST, IERROR

MPI_SCATTER_INIT(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
             RECVTYPE, ROOT, COMM, INFO, REQUEST, IERROR)
     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE, ROOT
     INTEGER COMM, INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Scatter(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
             root, comm, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
     TYPE(*), DIMENSION(..) :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount, root
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Iscatter(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
             root, comm, request, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount, root
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Scatter_init(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
             root, comm, info, request, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount, root
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP: Address of send buffer (choice, significant only at root).
.IP \(bu 2
\fBsendcount\fP: Number of elements sent to each process (integer, significant only at root).
.IP \(bu 2
\fBsendtype\fP: Datatype of send buffer elements (handle, significant only at root).
.IP \(bu 2
\fBrecvcount\fP: Number of elements in receive buffer (integer).
.IP \(bu 2
\fBrecvtype\fP: Datatype of receive buffer elements (handle).
.IP \(bu 2
\fBroot\fP: Rank of sending process (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.IP \(bu 2
\fBinfo\fP: Info (handle, persistent).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP: Address of receive buffer (choice).
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Scatter is the inverse operation to MPI_Gather\&.
.sp
The outcome is as if the root executed n send operations,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Send(sendbuf + i * sendcount * extent(sendtype), sendcount,
         sendtype, i, ...)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and each process executed a receive,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Recv(recvbuf, recvcount, recvtype, i, ...).
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
An alternative description is that the root sends a message with
MPI_Send(sendbuf, \fIsendcount\fP * \fIn\fP, \fIsendtype\fP, ...). This message
is split into \fIn\fP equal segments, the ith segment is sent to the ith
process in the group, and each process receives this message as above.
.sp
The send buffer is ignored for all nonroot processes.
.sp
The type signature associated with \fIsendcount\fP, \fIsendtype\fP at the root
must be equal to the type signature associated with \fIrecvcount\fP,
\fIrecvtype\fP at all processes (however, the type maps may be different).
This implies that the amount of data sent must be equal to the amount of
data received, pairwise between each process and the root. Distinct type
maps between sender and receiver are still allowed.
.sp
All arguments to the function are significant on process \fIroot\fP, while
on other processes, only arguments \fIrecvbuf\fP, \fIrecvcount\fP, \fIrecvtype\fP,
\fIroot\fP, \fIcomm\fP are significant. The arguments \fIroot\fP and \fIcomm\fP must
have identical values on all processes.
.sp
The specification of counts and types should not cause any location on
the root to be read more than once.
.sp
\fBRationale:\fP Though not needed, the last restriction is imposed so as
to achieve symmetry with MPI_Gather, where the corresponding restriction
(a multiple\-write restriction) is necessary.
.sp
\fBExample:\fP The reverse of Example 1 in the MPI_Gather manpage. Scatter
sets of 100 ints from the root to each process in the group.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Comm comm;
int gsize,*sendbuf;
int root, rbuf[100];
\&...
MPI_Comm_size(comm, &gsize);
sendbuf = (int *)malloc(gsize*100*sizeof(int));
\&...
MPI_Scatter(sendbuf, 100, MPI_INT, rbuf, 100,
            MPI_INT, root, comm);
.ft P
.fi
.UNINDENT
.UNINDENT
.SH USE OF IN-PLACE OPTION
.sp
When the communicator is an intracommunicator, you can perform a scatter
operation in\-place (the output buffer is used as the input buffer). Use
the variable MPI_IN_PLACE as the value of the root process \fIrecvbuf\fP\&. In
this case, \fIrecvcount\fP and \fIrecvtype\fP are ignored, and the root process
sends no data to itself.
.sp
Note that MPI_IN_PLACE is a special kind of value; it has the same
restrictions on its use as MPI_BOTTOM.
.sp
Because the in\-place option converts the receive buffer into a
send\-and\-receive buffer, a Fortran binding that includes INTENT must
mark these as INOUT, not OUT.
.SH WHEN COMMUNICATOR IS AN INTER-COMMUNICATOR
.sp
When the communicator is an inter\-communicator, the root process in the
first group sends data to all processes in the second group. The first
group defines the root process. That process uses MPI_ROOT as the value
of its \fIroot\fP argument. The remaining processes use MPI_PROC_NULL as the
value of their \fIroot\fP argument. All processes in the second group use
the rank of that root process in the first group as the value of their
\fIroot\fP argument. The receive buffer argument of the root process in the
first group must be consistent with the receive buffer argument of the
processes in the second group.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Scatterv    MPI_Gather    MPI_Gatherv
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
