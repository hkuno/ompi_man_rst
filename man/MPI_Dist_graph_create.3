.\" Man page generated from reStructuredText.
.
.TH "MPI_DIST_GRAPH_CREATE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Dist_graph_create\fP \- Makes a new communicator to which topology
information has been attached.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Dist_graph_create(MPI_Comm comm_old, int n, const int sources[],
     const int degrees[], const int destinations[], const int weights[],
        MPI_Info info, int reorder, MPI_Comm *comm_dist_graph)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_DIST_GRAPH_CREATE(COMM_OLD, N, SOURCES, DEGREES, DESTINATIONS, WEIGHTS,
                INFO, REORDER, COMM_DIST_GRAPH, IERROR)
     INTEGER COMM_OLD, N, SOURCES(*), DEGRES(*), WEIGHTS(*), INFO
     INTEGER COMM_DIST_GRAPH, IERROR
     LOGICAL   REORDER
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Dist_Graph_create(comm_old, n, sources, degrees, destinations, weights,
             info, reorder, comm_dist_graph, ierror)
     TYPE(MPI_Comm), INTENT(IN) :: comm_old
     INTEGER, INTENT(IN) :: n, sources(n), degrees(n), destinations(*)
     INTEGER, INTENT(IN) :: weights(*)
     TYPE(MPI_Info), INTENT(IN) :: info
     LOGICAL, INTENT(IN) :: reorder
     TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_old\fP: Input communicator without topology (handle).
.IP \(bu 2
\fBn\fP: Number of source nodes for which this process specifies edges (non\-negative integer).
.IP \(bu 2
\fBsources\fP: Array containing the \fIn\fP source nodes for which this process specifies edges (array of non\-negative integers).
.IP \(bu 2
\fBdegrees\fP: Array specifying the number of destinations for each source node in the source node array (array of non\-negative integers).
.IP \(bu 2
\fBdestinations\fP: Destination nodes for the source nodes in the source node array (array of non\-negative integers).
.IP \(bu 2
\fBweights\fP: Weights for source to destination edges (array of non\-negative integers).
.IP \(bu 2
\fBinfo\fP: Hints on optimization and interpretation of weights (handle).
.IP \(bu 2
\fBreorder\fP: Ranking may be reordered (true) or not (false) (logical).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBcomm_dist_graph\fP: Communicator with distributed graph topology added (handle).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Dist_graph_create\fP creates a new communicator \fIcomm_dist_graph\fP with
distrubuted graph topology and returns a handle to the new communicator.
The number of processes in \fIcomm_dist_graph\fP is identical to the number
of processes in \fIcomm_old\fP\&. Concretely, each process calls the
constructor with a set of directed (source,destination) communication
edges as described below. Every process passes an array of \fIn\fP source
nodes in the \fIsources\fP array. For each source node, a non\-negative
number of destination nodes is specied in the \fIdegrees\fP array. The
destination nodes are stored in the corresponding consecutive segment of
the \fIdestinations\fP array. More precisely, if the i\-th node in sources is
s, this specifies \fIdegrees\fP[i] \fIedges\fP (s,d) with d of the j\-th such
edge stored in
\fIdestinations\fP[\fIdegrees\fP[0]+...+\fIdegrees\fP[i\-1]+j]. The weight of
this edge is stored in
\fIweights\fP[\fIdegrees\fP[0]+...+\fIdegrees\fP[i\-1]+j]. Both the \fIsources\fP
and the \fIdestinations\fP arrays may contain the same node more than once,
and the order in which nodes are listed as destinations or sources is
not signicant. Similarly, different processes may specify edges with the
same source and destination nodes. Source and destination nodes must be
process ranks of comm_old. Different processes may specify different
numbers of source and destination nodes, as well as different source to
destination edges. This allows a fully distributed specification of the
communication graph. Isolated processes (i.e., processes with no
outgoing or incoming edges, that is, processes that do not occur as
source or destination node in the graph specication) are allowed. The
call to \fI\%MPI_Dist_graph_create\fP is collective.
.sp
If reorder = false, all processes will have the same rank in
comm_dist_graph as in comm_old. If reorder = true then the MPI library
is free to remap to other processes (of comm_old) in order to improve
communication on the edges of the communication graph. The weight
associated with each edge is a hint to the MPI library about the amount
or intensity of communication on that edge, and may be used to compute a
.SH WEIGHTS
.sp
Weights are specied as non\-negative integers and can be used to
influence the process remapping strategy and other internal MPI
optimizations. For instance, approximate count arguments of later
communication calls along specic edges could be used as their edge
weights. Multiplicity of edges can likewise indicate more intense
communication between pairs of processes. However, the exact meaning of
edge weights is not specied by the MPI standard and is left to the
implementation. An application can supply the special value
MPI_UNWEIGHTED for the weight array to indicate that all edges have the
same (effectively no) weight. It is erroneous to supply MPI_UNWEIGHTED
for some but not all processes of comm_old. If the graph is weighted but
\fIn\fP = 0, then MPI_WEIGHTS_EMPTY or any arbitrary array may be passed to
weights. Note that MPI_UNWEIGHTED and MPI_WEIGHTS_EMPTY are not special
weight values; rather they are special values for the total array
argument. In Fortran, MPI_UNWEIGHTED and MPI_WEIGHTS_EMPTY are objects
like MPI_BOTTOM (not usable for initialization or assignment). See MPI\-3
ยง 2.5.4.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Dist_graph_create_adjacent  MPI_Dist_graph_neighbors MPI_Dist_graph_neighbors_count
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
