.\" Man page generated from reStructuredText.
.
.TH "MPI_IPROBE" "3" "Jan 03, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Iprobe\fP \- Nonblocking test for a message.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag,
     MPI_Status *status)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR)
     LOGICAL FLAG
     INTEGER SOURCE, TAG, COMM, STATUS(MPI_STATUS_SIZE), IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Iprobe(source, tag, comm, flag, status, ierror)
     INTEGER, INTENT(IN) :: source, tag
     TYPE(MPI_Comm), INTENT(IN) :: comm
     LOGICAL, INTENT(OUT) :: flag
     TYPE(MPI_Status) :: status
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsource\fP: Source rank or MPI_ANY_SOURCE (integer).
.IP \(bu 2
\fBtag\fP: Tag value or MPI_ANY_TAG (integer).
.IP \(bu 2
\fBcomm\fP: Communicator (handle).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBflag\fP: Message\-waiting flag (logical).
.IP \(bu 2
\fBstatus\fP: Status object (status).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
The MPI_Probe and \fI\%MPI_Iprobe\fP operations allow checking of incoming
messages without actual receipt of them. The user can then decide how to
receive them, based on the information returned by the probe (basically,
the information returned by status). In particular, the user may
allocate memory for the receive buffer, according to the length of the
probed message.
.sp
MPI_Iprobe(source, tag, comm, flag, status) returns flag = true if there
is a message that can be received and that matches the pattern specified
by the arguments source, tag, and comm. The call matches the same
message that would have been received by a call to MPI_Recv(..., source,
tag, comm, status) executed at the same point in the program, and
returns in status the same value that would have been returned by
MPI_Recv(). Otherwise, the call returns flag = false, and leaves status
undefined.
.sp
If \fI\%MPI_Iprobe\fP returns flag = true, then the content of the status object
can be subsequently accessed as described in Section 3.2.5 of the MPI\-1
Standard, "Return Status," to find the source, tag, and length of the
probed message.
.sp
A subsequent receive executed with the same context, and the source and
tag returned in status by \fI\%MPI_Iprobe\fP will receive the message that was
matched by the probe if no other intervening receive occurs after the
probe. If the receiving process is multithreaded, it is the user\(aqs
responsibility to ensure that the last condition holds.
.sp
The source argument of MPI_Probe can be MPI_ANY_SOURCE, and the tag
argument can be MPI_ANY_TAG, so that one can probe for messages from an
arbitrary source and/or with an arbitrary tag. However, a specific
communication context must be provided with the comm argument.
.sp
If your application does not need to examine the \fIstatus\fP field, you can
save resources by using the predefined constant MPI_STATUS_IGNORE as a
special value for the \fIstatus\fP argument.
.sp
It is not necessary to receive a message immediately after it has been
probed for, and the same message may be probed for several times before
it is received.
.SH NOTE
.sp
Users of libmpi\-mt should remember that two threads may do an \fI\%MPI_Iprobe\fP
that actually returns true for the same message for both threads.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Probe | MPI_Cancel
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
