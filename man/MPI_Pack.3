.\" Man page generated from reStructuredText.
.
.TH "MPI_PACK" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Pack\fP \- Packs data of a given datatype into contiguous memory.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype,
     void *outbuf, int outsize, int *position, MPI_Comm comm)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_PACK(INBUF, INCOUNT, DATATYPE, OUTBUF,OUTSIZE, POSITION,
             COMM, IERROR)
     <type>  INBUF(*), OUTBUF(*)
     INTEGER INCOUNT, DATATYPE, OUTSIZE, POSITION, COMM, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Pack(inbuf, incount, datatype, outbuf, outsize, position, comm, ierror)
     TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf
     TYPE(*), DIMENSION(..) :: outbuf
     INTEGER, INTENT(IN) :: incount, outsize
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(INOUT) :: position
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETERS
\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBinbuf\fP: Input buffer start (choice).
.IP \(bu 2
\fBincount\fP: Number of input data items (integer).
.IP \(bu 2
\fBdatatype\fP: Datatype of each input data item (handle).
.IP \(bu 2
\fBoutsize\fP: Output buffer size, in bytes (integer).
.IP \(bu 2
\fBcomm\fP: Communicator for packed message (handle).
.UNINDENT
.sp
INPUT/OUTPUT PARAMETER
\-\-\-\-\-/\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBposition\fP: Current position in buffer, in bytes (integer).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBoutbuf\fP: Output buffer start (choice).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
Packs the message in the send buffer specified by \fIinbuf\fP, \fIincount\fP,
\fIdatatype\fP into the buffer space specified by \fIoutbuf\fP and \fIoutsize\fP\&.
The input buffer can be any communication buffer allowed in MPI_Send\&.
The output buffer is a contiguous storage area containing \fIoutsize\fP
bytes, starting at the address \fIoutbuf\fP (length is counted in bytes, not
elements, as if it were a communication buffer for a message of type
MPI_Packed).
.sp
The input value of \fIposition\fP is the first location in the output buffer
to be used for packing. \fIposition\fP is incremented by the size of the
packed message, and the output value of \fIposition\fP is the first location
in the output buffer following the locations occupied by the packed
message. The \fIcomm\fP argument is the communicator that will be
subsequently used for sending the packed message.
.sp
\fBExample:\fP An example using \fI\%MPI_Pack\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
int position, i, j, a[2];
char buff[1000];

\&....

MPI_Comm_rank(MPI_COMM_WORLD, &myrank);
if (myrank == 0)
{
   / * SENDER CODE */

position = 0;
  MPI_Pack(&i, 1, MPI_INT, buff, 1000, &position, MPI_COMM_WORLD);
  MPI_Pack(&j, 1, MPI_INT, buff, 1000, &position, MPI_COMM_WORLD);
  MPI_Send( buff, position, MPI_PACKED, 1, 0, MPI_COMM_WORLD);
}
else  /* RECEIVER CODE */
  MPI_Recv( a, 2, MPI_INT, 0, 0, MPI_COMM_WORLD)

}
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.nf
MPI_Unpack | MPI_Pack_size
.fi
.sp
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
