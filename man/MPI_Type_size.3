.\" Man page generated from reStructuredText.
.
.TH "MPI_TYPE_SIZE" "3" "Jan 05, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%MPI_Type_size\fP, MPI_Type_size_x \- Returns the number of bytes
occupied by entries in a data type.
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>
int MPI_Type_size(MPI_Datatype datatype, int *size)
int MPI_Type_size_x(MPI_Datatype datatype, MPI_Count *size)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_TYPE_SIZE(DATATYPE, SIZE, IERROR)
     INTEGER DATATYPE, SIZE, IERROR
MPI_TYPE_SIZE_X(DATATYPE, SIZE, IERROR)
     INTEGER DATATYPE
        INTEGER(KIND=MPI_COUNT_KIND) SIZE
        INTEGER IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Type_size(datatype, size, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER, INTENT(OUT) :: size
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
MPI_Type_size_x(datatype, size, ierror)
     TYPE(MPI_Datatype), INTENT(IN) :: datatype
     INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
INPUT PARAMETER
\-\-\-\-\- \-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBdatatype\fP: Datatype (handle).
.UNINDENT
.sp
OUTPUT PARAMETERS
\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-
.INDENT 0.0
.IP \(bu 2
\fBsize\fP: Datatype size (integer).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
\fI\%MPI_Type_size\fP returns the total size, in bytes, of the entries in the
type signature associated with datatype; i.e., the total size of the
data in a message that would be created with this datatype. Entries that
occur multiple times in the datatype are counted with their
multiplicity. For either function, if the \fIsize\fP parameter cannot
express the value to be returned (e.g., if the parameter is too small to
hold the output value), it is set to MPI_UNDEFINED.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
FORTRAN 77 NOTES
\-\-\-\-\-\-\- \-\- \-\-\-\-\-
.sp
The MPI standard prescribes portable Fortran syntax for the \fISIZE\fP
argument of MPI_Type_size_x only for Fortran 90. FORTRAN 77 users may
use the non\-portable syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INTEGER*MPI_COUNT_KIND SIZE
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where MPI_COUNT_KIND is a constant defined in mpif.h and gives the
length of the declared integer in bytes.
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
