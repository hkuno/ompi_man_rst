.\" Man page generated from reStructuredText.
.
.TH "MPI_INEIGHBOR_ALLTOALL" "3" "Feb 20, 2022" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
MPI_Neighbor_alltoall, \fI\%MPI_Ineighbor_alltoall\fP, MPI_Neighbor_alltoall
{INDENT}{curline}
.SH SYNTAX
.SS C Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpi.h>

int MPI_Neighbor_alltoall(const void *sendbuf, int sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
     MPI_Datatype recvtype, MPI_Comm comm)

int MPI_Ineighbor_alltoall(const void *sendbuf, int sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
     MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request)

int MPI_Neighbor_alltoall_init(const void *sendbuf, int sendcount,
     MPI_Datatype sendtype, void *recvbuf, int recvcount,
     MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request *request)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE MPI
! or the older form: INCLUDE \(aqmpif.h\(aq
MPI_NEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
     RECVTYPE, COMM, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
     INTEGER COMM, IERROR

MPI_INEIGHBOR_ALLTOALL(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
     RECVTYPE, COMM, REQUEST, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
     INTEGER COMM, REQUEST, IERROR

MPI_NEIGHBOR_ALLTOALL_INIT(SENDBUF, SENDCOUNT, SENDTYPE, RECVBUF, RECVCOUNT,
     RECVTYPE, COMM, INFO, REQUEST, IERROR)

     <type>  SENDBUF(*), RECVBUF(*)
     INTEGER SENDCOUNT, SENDTYPE, RECVCOUNT, RECVTYPE
     INTEGER COMM, INFO, REQUEST, IERROR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Fortran 2008 Syntax
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
USE mpi_f08
MPI_Neighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf
     TYPE(*), DIMENSION(..) :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Ineighbor_alltoall(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, request, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror

MPI_Neighbor_alltoall_init(sendbuf, sendcount, sendtype, recvbuf, recvcount,
             recvtype, comm, info, request, ierror)

     TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf
     TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf
     INTEGER, INTENT(IN) :: sendcount, recvcount
     TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype
     TYPE(MPI_Comm), INTENT(IN) :: comm
     TYPE(MPI_Info), INTENT(IN) :: info
     TYPE(MPI_Request), INTENT(OUT) :: request
     INTEGER, OPTIONAL, INTENT(OUT) :: ierror
.ft P
.fi
.UNINDENT
.UNINDENT
.SH INPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBsendbuf\fP: Starting address of send buffer (choice).
.IP \(bu 2
\fBsendcount\fP: Number of elements to send to each process (integer).
.IP \(bu 2
\fBsendtype\fP: Datatype of send buffer elements (handle).
.IP \(bu 2
\fBrecvcount\fP: Number of elements to receive from each process (integer).
.IP \(bu 2
\fBrecvtype\fP: Datatype of receive buffer elements (handle).
.IP \(bu 2
\fBcomm\fP: Communicator over which data is to be exchanged (handle).
.IP \(bu 2
\fBinfo\fP: Info (handle, persistent only).
.UNINDENT
.SH OUTPUT PARAMETERS
.INDENT 0.0
.IP \(bu 2
\fBrecvbuf\fP: Starting address of receive buffer (choice).
.IP \(bu 2
\fBrequest\fP: Request (handle, non\-blocking only).
.IP \(bu 2
\fBIERROR\fP: Fortran only: Error status (integer).
.UNINDENT
.SH DESCRIPTION
.sp
MPI_Neighbor_alltoall is a collective operation in which all processes
send and receive the same amount of data to each neighbor. The operation
of this routine can be represented as follows, where each process
performs 2n (n being the number of neighbors in communicator \fIcomm\fP)
independent point\-to\-point communications. The neighbors and buffer
layout are determined by the topology of \fIcomm\fP\&.
.sp
Example of MPI_Neighbor_alltoall semantics for cartesian topologies:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
MPI_Cart_get(comm, maxdims, dims, periods, coords);
for (dim = 0, i = 0 ; dim < dims ; ++dim) {
    MPI_Cart_shift(comm, dim, 1, &r0, &r1);
    MPI_Isend(sendbuf + i * sendcount * extent(sendtype),
              sendcount, sendtype, r0, ..., comm, ...);
    MPI_Irecv(recvbuf + i * recvcount * extent(recvtype),
              recvcount, recvtype, r0, ..., comm, ...);
    ++i;
    MPI_Isend(sendbuf + i * sendcount * extent(sendtype),
              sendcount, sendtype, r1, ..., comm, &req[i]);
    MPI_Irecv(recvbuf + i * recvcount * extent(recvtype),
              recvcount, recvtype, r1, ..., comm, ...);
    ++i;
}

MPI_Waitall (...);
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Each process breaks up its local \fIsendbuf\fP into n blocks \- each
containing \fIsendcount\fP elements of type \fIsendtype\fP \- and divides its
\fIrecvbuf\fP similarly according to \fIrecvcount\fP and \fIrecvtype\fP\&. Process j
sends the k\-th block of its local \fIsendbuf\fP to neighbor k, which places
the data in the j\-th block of its local \fIrecvbuf\fP\&. The amount of data
sent must be equal to the amount of data received, pairwise, between
every pair of processes.
.SH NEIGHBOR ORDERING
.sp
For a distributed graph topology, created with MPI_Dist_graph_create,
the sequence of neighbors in the send and receive buffers at each
process is defined as the sequence returned by MPI_Dist_graph_neighbors
for destinations and sources, respectively. For a general graph
topology, created with MPI_Graph_create, the order of neighbors in the
send and receive buffers is defined as the sequence of neighbors as
returned by MPI_Graph_neighbors\&. Note that general graph topologies
should generally be replaced by the distributed graph topologies.
.sp
For a Cartesian topology, created with MPI_Cart_create, the sequence of
neighbors in the send and receive buffers at each process is defined by
order of the dimensions, first the neighbor in the negative direction
and then in the positive direction with displacement 1. The numbers of
sources and destinations in the communication routines are 2*ndims with
ndims defined in MPI_Cart_create\&. If a neighbor does not exist, i.e., at
the border of a Cartesian topology in the case of a non\-periodic virtual
grid dimension (i.e., periods[...]==false), then this neighbor is
defined to be MPI_PROC_NULL.
.sp
If a neighbor in any of the functions is MPI_PROC_NULL, then the
neighborhood collective communication behaves like a point\-to\-point
communication with MPI_PROC_NULL in this direction. That is, the buffer
is still part of the sequence of neighbors but it is neither
communicated nor updated.
.SH NOTES
.sp
The MPI_IN_PLACE option for \fIsendbuf\fP is not meaningful for this
function.
.sp
All arguments on all processes are significant. The \fIcomm\fP argument, in
particular, must describe the same communicator on all processes. \fIcomm\fP
must be either a cartesian, graph, or dist graph communicator.
.sp
There are two MPI library functions that are more general than
MPI_Neighbor_alltoall\&. MPI_Neighbor_alltoallv allows all\-to\-all
communication to and from buffers that need not be contiguous; different
processes may send and receive different amounts of data.
MPI_Neighbor_alltoallw expands MPI_Neighbor_alltoallv\(aqs functionality to
allow the exchange of data with different datatypes.
.SH ERRORS
.sp
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.sp
Before the error value is returned, the current MPI error handler is
called. By default, this error handler aborts the MPI job, except for
I/O function errors. The error handler may be changed with
MPI_Comm_set_errhandler; the predefined error handler MPI_ERRORS_RETURN
may be used to cause error values to be returned. Note that MPI does not
guarantee that an MPI program can continue past an error.
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
MPI_Neighbor_alltoallv MPI_Neighbor_alltoallw MPI_Cart_create
MPI_Graph_create MPI_Dist_graph_create MPI_Dist_graph_create_adjacent
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2020, The Open MPI Community
.\" Generated by docutils manpage writer.
.
